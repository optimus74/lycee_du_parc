I"¶)<ul>
  <li><a href="#cr√©dits">Cr√©dits</a></li>
  <li><a href="#pr√©ambule">Pr√©ambule</a></li>
  <li><a href="#portes-logiques">Portes logiques</a>
    <ul>
      <li><a href="#le-transistor-porte-logique-de-base">Le transistor porte logique de base</a></li>
      <li><a href="#dautres-portes-logiques">D‚Äôautres portes logiques</a>
        <ul>
          <li><a href="#transistors-en-s√©rie-ou-en-parall√®le">Transistors en s√©rie ou en parall√®le</a></li>
          <li><a href="#portes-logiques-et-fonctions-logiques-√©l√©mentaires">Portes logiques et fonctions logiques √©l√©mentaires</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#fonctions-bool√©ennes">Fonctions bool√©ennes</a>
    <ul>
      <li><a href="#fonctions-bool√©ennes-1">Fonctions bool√©ennes</a></li>
      <li><a href="#qcm-types-e3c">QCM types E3C</a></li>
      <li><a href="#pour-aller-plus-loin-hors-programme-de-premi√®re-nsi">Pour aller plus loin (hors programme de premi√®re NSI)</a>
        <ul>
          <li><a href="#dresser-la-table-de-v√©rit√©-dune-fonction-bool√©enne">Dresser la table de v√©rit√© d‚Äôune fonction bool√©enne</a></li>
          <li><a href="#exprimer-une-fonction-bool√©enne-√†-partir-de-sa-table-de-v√©rit√©">Exprimer une fonction bool√©enne √† partir de sa table de v√©rit√©</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#circuits-combinatoires">Circuits combinatoires</a>
    <ul>
      <li><a href="#d√©finition">D√©finition</a></li>
      <li><a href="#d√©codeur-avec-2-bits-dentr√©es">D√©codeur avec 2 bits d‚Äôentr√©es</a></li>
      <li><a href="#demi-additionneur-et-additionneur-1-bit">Demi-additionneur et additionneur 1 bit</a></li>
    </ul>
  </li>
  <li><a href="#op√©rations-bit-√†-bit-en-python-hors-programme-de-premi√®re-nsi">Op√©rations bit √† bit en <code class="language-plaintext highlighter-rouge">Python</code> (hors programme de premi√®re NSI)</a>
    base](#le-transistor-porte-logique-de-base)
    <ul>
      <li><a href="#dautres-portes-logiques">D‚Äôautres portes logiques</a>
        <ul>
          <li><a href="#transistors-en-s√©rie-ou-en-parall√®le">Transistors en s√©rie ou en
parall√®le</a></li>
          <li><a href="#portes-logiques-et-fonctions-logiques-√©l√©mentaires">Portes logiques et fonctions logiques
√©l√©mentaires</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#fonctions-bool√©ennes">Fonctions bool√©ennes</a>
    <ul>
      <li><a href="#fonctions-bool√©ennes-1">Fonctions bool√©ennes</a></li>
      <li><a href="#qcm-types-e3c">QCM types E3C</a></li>
      <li><a href="#pour-aller-plus-loin-hors-programme-de-premi√®re-nsi">Pour aller plus loin (hors programme de premi√®re
NSI)</a>
        <ul>
          <li><a href="#dresser-la-table-de-v√©rit√©-dune-fonction-bool√©enne">Dresser la table de v√©rit√© d‚Äôune fonction
bool√©enne</a></li>
          <li><a href="#exprimer-une-fonction-bool√©enne-√†-partir-de-sa-table-de-v√©rit√©">Exprimer une fonction bool√©enne √† partir de sa table de
v√©rit√©</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#circuits-combinatoires">Circuits combinatoires</a>
    <ul>
      <li><a href="#d√©finition">D√©finition</a></li>
      <li><a href="#d√©codeur-avec-2-bits-dentr√©es">D√©codeur avec 2 bits d‚Äôentr√©es</a></li>
      <li><a href="#demi-additionneur-et-additionneur-1-bit">Demi-additionneur et additionneur 1
bit</a></li>
    </ul>
  </li>
  <li><a href="#op√©rations-bit-√†-bit-en-python-hors-programme-de-premi√®re-nsi">Op√©rations bit √† bit en <code class="language-plaintext highlighter-rouge">Python</code> (hors programme de premi√®re
NSI)</a></li>
</ul>

<h1 id="cr√©dits">Cr√©dits</h1>

<p><em>Ce cours est largement inspir√© du chapitre 22 du manuel NSI de la
collection Tortue chez Ellipsen auteurs : Ballabonski, Conchon,
Filliatre, N‚ÄôGuyen.</em></p>

<h1 id="pr√©ambule">Pr√©ambule</h1>

<p>Les circuits d‚Äôun ordinateur manipulent uniquement des 0 ou des 1
repr√©sent√©s en interne par des tensions hautes ou basses. Les premiers
ordinateurs construits dans la p√©riode 1945-1950 sont bas√©s sur une
technologie de tube √† vide ou tube √©lectrique. En 1947, aux laboratoires
Bell, <a href="https://fr.wikipedia.org/wiki/Transistor">Shockley, Bardeen et
Brattain</a> inventent le
<strong>transistor</strong> au <em>germanium</em> un petit composant √©lectronique qui se
comporte comme un interrupteur. Les transistors, plus petits et
dissipant moins de chaleur, vont supplanter les tubes √©lectriques : en
1954 le <em>germanium</em> est remplac√© par le <em>silicium</em>, en 1955 apparaissent
les premiers ordinateurs enti√®rement transistoris√©s, en 1960 le
transistor √† effet de champ permet l‚Äôint√©gration de dizaines composants
dans un centim√®tre carr√©. Les transistors sont ensuite directement
grav√©s dans une plaque de <em>silicium</em> constituant un <strong>cicrcuit
int√©gr√©</strong>. En 1965 Gordon Moore futur directeur d‚ÄôIntel √©nonce la <a href="https://fr.wikipedia.org/wiki/Loi_de_Moore">loi
empirique</a> portant son nom
qui fixe une feuille de route √† l‚Äôindustrie des mircroprocesseurs : le
doublement de la densit√© d‚Äôint√©gration des transistors tous les deux
ans. Cette loi s‚Äôest v√©rifi√©e jusqu‚Äô√† pr√©sent avec une finesse de
gravure d‚Äôenviron 5 nanom√®tres en 2020. Le
<a href="https://en.wikipedia.org/wiki/Moore%27s_law#/media/File:Moore's_Law_Transistor_Count_1971-2018.png">graphique</a>
ci-dessous repr√©sente l‚Äô√©volution du nombre de transistors par circuit
int√©gr√©.</p>

<p><img src="images/640px-Moores_Law_Transistor_Count_1971-2018.png" alt="Loi de Moore Source :
Wikipedia" /></p>

<h1 id="portes-logiques">Portes logiques</h1>

<h2 id="le-transistor-porte-logique-de-base">Le transistor porte logique de base</h2>

<p><strong>D√©finition 1</strong></p>

<p>Un <strong>transistor</strong> poss√®de trois broches : la grille, la sortie (ou
drain) et la source soumis √† des √©tats de tension haute ou basse qu‚Äôon
peut assimiler aux valeurs binaires 1 et 0 d‚Äôun <strong>bit</strong>. Si la tension
appliqu√©e sur la grille est haute (bit √† 1) alors le transitor laisse
passer le courant entre la source d‚Äô√©nergie et la sortie et cette
derni√®re passe √† l‚Äô√©tat de tension basse (bit √† 0), sinon la sortie
reste en tension haute (bit 1).</p>

<p>Une <strong>fonction logique</strong> prend un ou plusieurs bits en entr√©e et
retourne un ou plusieurs bits en sortie. Une <strong>porte logique</strong> est un
circuit √©lectronique repr√©sentant une <strong>fonction logique</strong>.</p>

<p>Une <strong>table logique</strong> repr√©sente les sorties produites par une fonction
logique pour toutes les entr√©es possibles.</p>

<p>Un transistor repr√©sente une fonction logique dont le bit d‚Äôentr√©e est
l‚Äô√©tat de tension de la grille et le bit de sortie, l‚Äô√©tat de tension
de la sortie. La <strong>table logique</strong> (table 1) associ√©e est celle du <strong>NON
logique</strong> ou <strong>Inverseur</strong>.</p>

<p>Fichier de test <a href="http://www.cburch.com/logisim/">Logisim</a> :
<a href="circuits_logisim/transistor.circ">transistor.circ</a>.</p>

<p><img src="images/transistor.png" alt="Transistor" /></p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">A</th>
      <th>B = NON(A)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td>1</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>0</td>
    </tr>
  </tbody>
</table>

<p><strong>Table logique d‚Äôune porte NON</strong></p>

<p><strong>Il existe deux conventions de repr√©sentation symbolique des portes
logiques, une europ√©enne et une am√©ricaine.</strong></p>

<p><img src="images/porte_not_european.png" alt="porte NOT europ√©eenne" /><br />
&amp; <img src="images/porte_not_american.png" alt="porte NOT am√©ricaine" /></p>

<p><a href="videos/transistor-definition1.mp4">Tutoriel video Logisim : le
transistor</a></p>

<h2 id="dautres-portes-logiques">D‚Äôautres portes logiques</h2>

<h3 id="transistors-en-s√©rie-ou-en-parall√®le">Transistors en s√©rie ou en parall√®le</h3>

<p><strong>Exercice 1</strong></p>

<p>On donne ci-dessous les repr√©sentations de deux portes logiques :</p>

<ul>
  <li>La <strong>porte NAND</strong> constitu√©e de deux transistors en s√©rie</li>
  <li>La <strong>porte NOR</strong> constitu√©e de deux transistors en parall√®le</li>
</ul>

<p>Chacune de ces portes logiques comportent deux bits d‚Äôentr√©e : A pour la
grille du transistor 1 et B pour la grille du transistor 2 et un bit de
sortie.</p>

<p>Compl√©ter leurs tables logiques.</p>

<p>V√©rifier avec <a href="http://www.cburch.com/logisim/">Logisim</a> et les fichiers
<a href="circuits_logisim/porte_NAND.circ">porte_NAND.circ</a> et
<a href="circuits_logisim/porte_NOR.circ">porte_NOR.circ</a>.</p>

<p><a href="videos/porteNAND.mp4">Tutoriel video Logisim : porte NAND</a></p>

<p><a href="videos/porteNOR.mp4">Tutoriel video Logisim : porte NOR</a></p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">A</th>
      <th>B</th>
      <th>NAND(A, B)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td>0</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td>1</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>0</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>1</td>
      <td>¬†</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: center">A</th>
      <th>B</th>
      <th>NOR(A, B)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td>0</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td>1</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>0</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>1</td>
      <td>¬†</td>
    </tr>
  </tbody>
</table>

<p><img src="images/porte_nand.png" alt="Porte NAND" /><br />
&amp; <img src="images/porte_nor.png" alt="Porte NOR" /></p>

<p><strong>Voici les repr√©sentations symboliques des portes logiques NAND et NOR
:</strong></p>

<p><img src="images/porte_nand_european.png" alt="Porte NAND europ√©enne" /><br />
&amp; <img src="images/porte_nand_american.png" alt="Porte NAND am√©ricaine" /></p>

<p><img src="images/porte_nor_european.png" alt="Porte NOR europ√©enne" /><br />
&amp; <img src="images/porte_nor_american.png" alt="Porte NOR am√©ricaine" /></p>

<h3 id="portes-logiques-et-fonctions-logiques-√©l√©mentaires">Portes logiques et fonctions logiques √©l√©mentaires</h3>

<p><strong>Exercice 2</strong></p>

<p>Fichier de test <a href="http://www.cburch.com/logisim/">Logisim</a> :
<a href="circuits_logisim/exercice2.circ">exercice2.circ</a>.</p>

<ol>
  <li>Compl√©ter la table logique de la porte logique repr√©sent√©e par le
circuit ci-dessous. Quelle porte logique peut-on ainsi repr√©senter ?</li>
</ol>

<p><img src="images/porte_not_with_nor.png" alt="Porte NOT" /></p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">A</th>
      <th>B = f(A)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>¬†</td>
    </tr>
  </tbody>
</table>

<ol>
  <li>Compl√©ter la table logique de la porte logique repr√©sent√©e par le
circuit ci-dessous. Quelle fonction logique correspond √† cette porte
logique ?</li>
</ol>

<p><img src="images/porte_and_with_nor.png" alt="Porte AND" /></p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">A</th>
      <th>B</th>
      <th>C = g(A, B)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td>0</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td>1</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>0</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>1</td>
      <td>¬†</td>
    </tr>
  </tbody>
</table>

<p><a href="videos/exercice2.mp4">Tutoriel video Logisim : exercice 2</a></p>

<p><strong>Exercice 3</strong></p>

<p>Fichier de test <a href="http://www.cburch.com/logisim/">Logisim</a> :
<a href="circuits_logisim/exercice3.circ">exercice3.circ</a>.</p>

<ol>
  <li>Compl√©ter la table logique de la porte logique repr√©sent√©e par le
circuit ci-dessous. Quelle porte logique peut-on ainsi repr√©senter ?</li>
</ol>

<p><img src="images/porte_not_with_nand.png" alt="Porte NOT" /></p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">A</th>
      <th>B = f(A)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>¬†</td>
    </tr>
  </tbody>
</table>

<ol>
  <li>Compl√©ter la table logique de la porte logique repr√©sent√©e par le
circuit ci-dessous. Quelle fonction logique correspond √† cette porte
logique ?</li>
</ol>

<p><img src="images/porte_or_with_nand.png" alt="Porte OR" /></p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">A</th>
      <th>B</th>
      <th>C = g(A, B)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td>0</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td>1</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>0</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>1</td>
      <td>¬†</td>
    </tr>
  </tbody>
</table>

<p><a href="videos/exercice3.mp4">Tutoriel video Logisim : exercice 3</a></p>

<p><strong>Voici les repr√©sentations symboliques des portes logiques <code class="language-plaintext highlighter-rouge">AND</code> et
<code class="language-plaintext highlighter-rouge">OR</code> :</strong></p>

<p><img src="images/porte_and_european.png" alt="Porte AND europ√©enne" /><br />
&amp; <img src="images/porte_and_american.png" alt="Porte AND am√©ricaine" /></p>

<p><img src="images/porte_or_european.png" alt="Porte OR europ√©enne" /><br />
&amp; <img src="images/porte_or_american.png" alt="Porte OR am√©ricaine" /></p>

<p><strong>Exercice 4</strong></p>

<ol>
  <li>Construire un circuit repr√©sentant une porte <code class="language-plaintext highlighter-rouge">OR</code> uniquement avec
des portes <code class="language-plaintext highlighter-rouge">NOR</code>.</li>
  <li>Construire un circuit repr√©sentant une porte <code class="language-plaintext highlighter-rouge">AND</code> uniquement avec
des portes <code class="language-plaintext highlighter-rouge">NAND</code>.</li>
</ol>

<p>Ainsi chacune des portes, <code class="language-plaintext highlighter-rouge">NAND</code> ou <code class="language-plaintext highlighter-rouge">NOR</code> permet de construire les
portes <code class="language-plaintext highlighter-rouge">NOT</code>, <code class="language-plaintext highlighter-rouge">OR</code>, <code class="language-plaintext highlighter-rouge">AND</code>. Toute porte logique pouvant s‚Äôexprimer √†
l‚Äôaide de ces trois portes, les portes <code class="language-plaintext highlighter-rouge">NAND</code> et <code class="language-plaintext highlighter-rouge">NOR</code> sont dites
<em>universelles</em>.</p>

<p><a href="videos/exercice4.mp4">Tutoriel video Logisim : exercice 4</a></p>

<h1 id="fonctions-bool√©ennes">Fonctions bool√©ennes</h1>

<h2 id="fonctions-bool√©ennes-1">Fonctions bool√©ennes</h2>

<p><strong>D√©finition 2</strong></p>

<ul>
  <li>Un <strong>bool√©en</strong> est un type de donn√©es pouvant prendre deux valeurs
<code class="language-plaintext highlighter-rouge">True</code> (Vrai) ou <code class="language-plaintext highlighter-rouge">False</code> (Faux) qu‚Äôon repr√©sente num√©riquement par
un <strong>bit</strong> de valeur <img src="https://latex.codecogs.com/png.latex?1" alt="1" title="1" /> pour <code class="language-plaintext highlighter-rouge">True</code> ou <img src="https://latex.codecogs.com/png.latex?0" alt="0" title="0" />
pour <code class="language-plaintext highlighter-rouge">False</code>. Electroniquement, les valeurs 1 et 0 se traduisent
respectivement par des tensions haute ou basse.</li>
  <li>Une <strong>fonction bool√©enne</strong>
<img src="https://latex.codecogs.com/png.latex?f" alt="f" title="f" /> associe un bool√©en
√† un ou plusieurs bool√©ens.</li>
  <li>Une <strong>fonction bool√©enne</strong> avec
<img src="https://latex.codecogs.com/png.latex?n" alt="n" title="n" /> arguments est
d√©finie sur un ensemble
<img src="https://latex.codecogs.com/png.latex?%5C%7B0%3B1%5C%7D%5En" alt="\{0;1\}^n" title="\\{0;1\\}^n" /> √† <img src="https://latex.codecogs.com/png.latex?2%5En" alt="2^n" title="2^n" /> valeurs et prend ses valeurs dans
<img src="https://latex.codecogs.com/png.latex?%5C%7B0%3B1%5C%7D" alt="\{0;1\}" title="\\{0;1\\}" /> qui a <img src="https://latex.codecogs.com/png.latex?2" alt="2" title="2" />
√©l√©ments. On peut recenser les
<img src="https://latex.codecogs.com/png.latex?2%5En" alt="2^n" title="2^n" /> √©valuations
d‚Äôune fonction bool√©enne √†
<img src="https://latex.codecogs.com/png.latex?n" alt="n" title="n" /> arguments dans une
<strong>table de v√©rit√©</strong> qui la d√©finit enti√®rement. Il existe
<img src="https://latex.codecogs.com/png.latex?2%5E%7B2%5En%7D" alt="2^{2^n}" title="2^{2^n}" /> fonctions bool√©ennes √†
<img src="https://latex.codecogs.com/png.latex?n" alt="n" title="n" /> arguments.</li>
  <li>Une <strong>porte logique</strong> est la repr√©sentation sous forme de circuit
d‚Äôune fonction bool√©enne et sa <strong>table logique</strong> est la <strong>table de
v√©rit√©</strong> de cette fonction.</li>
</ul>

<p><strong>Exercice 5</strong></p>

<ol>
  <li>Compl√©ter la fonction <code class="language-plaintext highlighter-rouge">Python</code> ci-dessous pour qu‚Äôelle affiche la
table de v√©rit√© d‚Äôune fonction bool√©enne √† deux entr√©es. Expliquer
le r√¥le de la fonction <code class="language-plaintext highlighter-rouge">int</code>.</li>
</ol>

<!-- end list -->

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">table_verite_2bits</span><span class="p">(</span><span class="n">fonction</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'|{:^10}|{:^10}|{:^15}|'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">,</span><span class="n">fonction</span><span class="p">.</span><span class="n">__name__</span><span class="o">+</span><span class="s">'(a,b)'</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="p">.............:</span>
        <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="p">.............:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">'|{:^10}|{:^10}|{:^15}|'</span><span class="p">.</span><span class="nb">format</span><span class="p">(......,</span> <span class="p">......,</span> 
            <span class="nb">int</span><span class="p">(</span><span class="n">fonction</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">a</span><span class="p">),</span><span class="nb">bool</span><span class="p">(</span><span class="n">b</span><span class="p">)))))</span>
</code></pre></div></div>

<ol>
  <li>V√©rifier que les tables de v√©rit√© affich√©es pour les fonctions
<code class="language-plaintext highlighter-rouge">bool.__or__</code>, <code class="language-plaintext highlighter-rouge">bool.__and__</code> et <code class="language-plaintext highlighter-rouge">bool.__not__</code> sont correctes.</li>
</ol>

<!-- end list -->

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">table_verite_2bits</span><span class="p">(</span><span class="nb">bool</span><span class="p">.</span><span class="n">__or__</span><span class="p">)</span>                                                                                                                                           
<span class="o">|</span>    <span class="n">a</span>     <span class="o">|</span>    <span class="n">b</span>     <span class="o">|</span>  <span class="n">__or__</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>  <span class="o">|</span>
<span class="o">|</span>    <span class="mi">1</span>     <span class="o">|</span>    <span class="mi">1</span>     <span class="o">|</span>       <span class="mi">1</span>       <span class="o">|</span>
<span class="o">|</span>    <span class="mi">1</span>     <span class="o">|</span>    <span class="mi">0</span>     <span class="o">|</span>       <span class="mi">1</span>       <span class="o">|</span>
<span class="o">|</span>    <span class="mi">0</span>     <span class="o">|</span>    <span class="mi">1</span>     <span class="o">|</span>       <span class="mi">1</span>       <span class="o">|</span>
<span class="o">|</span>    <span class="mi">0</span>     <span class="o">|</span>    <span class="mi">0</span>     <span class="o">|</span>       <span class="mi">0</span>       <span class="o">|</span>
</code></pre></div></div>

<p><a href="videos/exercice5.mp4">Tutoriel video : exercice 5</a></p>

<p><strong>Propri√©t√© 1</strong></p>

<p>On peut exprimer toute fonction bool√©enne √† l‚Äôaide de trois fonctions
bool√©ennes √©l√©mentaires :</p>

<ul>
  <li>La <em>n√©gation</em> de <img src="https://latex.codecogs.com/png.latex?x" alt="x" title="x" />
est une fonction √† 1 bit d‚Äôentr√©e (unaire) not√©e <img src="https://latex.codecogs.com/png.latex?%5Cneg%20x" alt="\neg
x" title="\\neg x" /> ou
<img src="https://latex.codecogs.com/png.latex?%5Coverline%7Bx%7D" alt="\overline{x}" title="\\overline{x}" />.<br />
Si <code class="language-plaintext highlighter-rouge">x</code> est un bool√©en, sa <em>n√©gation</em> est <code class="language-plaintext highlighter-rouge">not x</code> en <code class="language-plaintext highlighter-rouge">Python</code>.</li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="https://latex.codecogs.com/png.latex?x" alt="x" title="x" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?%5Cneg%20x" alt="\neg x" title="\\neg x" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>¬†</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>La <em>conjonction</em> de <img src="https://latex.codecogs.com/png.latex?x" alt="x" title="x" />
et <img src="https://latex.codecogs.com/png.latex?y" alt="y" title="y" /> est une fonction
√† 2 bits d‚Äôentr√©e (binaire) not√©e <img src="https://latex.codecogs.com/png.latex?x%20%5Cwedge%20y" alt="x \wedge
y" title="x \\wedge y" /> ou <img src="https://latex.codecogs.com/png.latex?x%20.%20y" alt="x .
y" title="x . y" />.<br />
Si <code class="language-plaintext highlighter-rouge">x</code> et <code class="language-plaintext highlighter-rouge">y</code> sont des bool√©ens, leur <em>conjonction</em> est <code class="language-plaintext highlighter-rouge">x and y</code> en
<code class="language-plaintext highlighter-rouge">Python</code>.</li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="https://latex.codecogs.com/png.latex?x" alt="x" title="x" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?y" alt="y" title="y" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?x%20%5Cwedge%20y" alt="x \wedge y" title="x \\wedge y" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td>0</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td>1</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>0</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>1</td>
      <td>¬†</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>La <em>disconjonction</em> de <img src="https://latex.codecogs.com/png.latex?x" alt="x" title="x" /> et <img src="https://latex.codecogs.com/png.latex?y" alt="y" title="y" /> est une
fonction √† 2 bits d‚Äôentr√©e (binaire) not√©e <img src="https://latex.codecogs.com/png.latex?x%20%5Cvee%20y" alt="x \vee
y" title="x \\vee y" />
ou <img src="https://latex.codecogs.com/png.latex?x%20%2B%20y" alt="x + y" title="x + y" />.<br />
Si <code class="language-plaintext highlighter-rouge">x</code> et <code class="language-plaintext highlighter-rouge">y</code> sont des bool√©ens, leur <em>disjonction</em> est <code class="language-plaintext highlighter-rouge">x or y</code> en
<code class="language-plaintext highlighter-rouge">Python</code>.</li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="https://latex.codecogs.com/png.latex?x" alt="x" title="x" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?y" alt="y" title="y" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?x%20%5Cvee%20y" alt="x \vee y" title="x \\vee y" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td>0</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td>1</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>0</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>1</td>
      <td>¬†</td>
    </tr>
  </tbody>
</table>

<p><strong>Propri√©t√© 2</strong></p>

<ol>
  <li>Les fonctions bool√©ennes √©l√©mentaires respectent un certain nombre
de r√®gles qui permettent de simplifier les expressions bool√©ennes
complexes :</li>
</ol>

<!-- end list -->

<ul>
  <li><em>op√©rateur involutif</em> : <img src="https://latex.codecogs.com/png.latex?%5Cneg%28%5Cneg%20x%29%20%3D%20x" alt="\neg(\neg x) =
x" title="\\neg(\\neg x) = x" /> et
<img src="https://latex.codecogs.com/png.latex?%5Coverline%7B%5Coverline%7Bx%7D%7D%3Dx" alt="\overline{\overline{x}}=x" title="\\overline{\\overline{x}}=x" /></li>
  <li><em>√©l√©ment neutre</em> : <img src="https://latex.codecogs.com/png.latex?1%20%5Cwedge%20x%20%3D%20x" alt="1 \wedge x =
x" title="1 \\wedge x = x" /> et <img src="https://latex.codecogs.com/png.latex?1%20.%20x%20%3Dx" alt="1 . x
=x" title="1 . x =x" /> ou <img src="https://latex.codecogs.com/png.latex?0%20%5Cvee%20x%20%3D%20x" alt="0 \vee x =
x" title="0 \\vee x = x" /> et <img src="https://latex.codecogs.com/png.latex?0%20%2B%20x%20%3Dx" alt="0 + x
=x" title="0 + x =x" /></li>
  <li><em>√©l√©ment absorbant</em> : <img src="https://latex.codecogs.com/png.latex?0%20%5Cwedge%20x%20%3D%200" alt="0 \wedge x
= 0" title="0 \\wedge x = 0" /> et <img src="https://latex.codecogs.com/png.latex?0%20.%20x%20%3D0" alt="0 . x
=0" title="0 . x =0" /> ou <img src="https://latex.codecogs.com/png.latex?1%20%5Cvee%20x%20%3D%20x" alt="1 \vee x =
x" title="1 \\vee x = x" /> et <img src="https://latex.codecogs.com/png.latex?1%20%2B%20x%20%3D1" alt="1 + x
=1" title="1 + x =1" /></li>
  <li><em>idempotence</em> : <img src="https://latex.codecogs.com/png.latex?x%20%5Cwedge%20x%20%3D%20x" alt="x \wedge x =
x" title="x \\wedge x = x" /> et <img src="https://latex.codecogs.com/png.latex?x%20.%20x%20%3Dx" alt="x . x
=x" title="x . x =x" /> ou <img src="https://latex.codecogs.com/png.latex?x%20%5Cvee%20x%20%3D%20x" alt="x \vee x =
x" title="x \\vee x = x" /> et <img src="https://latex.codecogs.com/png.latex?x%20%2B%20x%20%3Dx" alt="x + x
=x" title="x + x =x" /></li>
  <li><em>compl√©ment</em> : <img src="https://latex.codecogs.com/png.latex?x%20%5Cwedge%20%28%5Cneg%20x%29%20%3D%200" alt="x \wedge (\neg x)
= 0" title="x \\wedge (\\neg x) = 0" /> et <img src="https://latex.codecogs.com/png.latex?x%20.%20%28%5Coverline%7Bx%7D%29%20%3D0" alt="x . (\overline{x})
=0" title="x . (\\overline{x}) =0" /> ou <img src="https://latex.codecogs.com/png.latex?x%20%5Cvee%20%28%5Cneg%20x%29%20%3D%201" alt="x \vee (\neg x)
= 1" title="x \\vee (\\neg x) = 1" /> et <img src="https://latex.codecogs.com/png.latex?x%20%2B%20%5Coverline%7Bx%7D%20%3D1" alt="x + \overline{x}
=1" title="x + \\overline{x} =1" /></li>
  <li><em>commutativit√©</em> : <img src="https://latex.codecogs.com/png.latex?x%20%5Cwedge%20y%20%3D%20y%20%5Cwedge%20x" alt="x \wedge y = y \wedge
x" title="x \\wedge y = y \\wedge x" /> et <img src="https://latex.codecogs.com/png.latex?x%20.%20y%20%3D%20y%20.%20x" alt="x . y = y .
x" title="x . y = y . x" /> ou <img src="https://latex.codecogs.com/png.latex?x%20%5Cvee%20y%20%3D%20y%20%5Cvee%20x" alt="x \vee y = y \vee
x" title="x \\vee y = y \\vee x" /> et <img src="https://latex.codecogs.com/png.latex?x%20%2B%20y%20%3D%20y%20%2B%20x" alt="x + y = y +
x" title="x + y = y + x" /></li>
  <li><em>associativit√©</em> : <img src="https://latex.codecogs.com/png.latex?x%20%5Cwedge%20%28%20y%20%5Cwedge%20z%29%20%3D%20%28x%20%5Cwedge%20y%29%20%5Cwedge%20z" alt="x \wedge ( y \wedge z) = (x \wedge y) \wedge
z" title="x \\wedge ( y \\wedge z) = (x \\wedge y) \\wedge z" /> et <img src="https://latex.codecogs.com/png.latex?x%20.%20%28y%20.%20z%29%20%3D%20%28x%20.%20y%29%20.%20z" alt="x . (y .
z) = (x . y) .
z" title="x . (y . z) = (x . y) . z" /> ou <img src="https://latex.codecogs.com/png.latex?x%20%5Cvee%20%28%20y%20%5Cvee%20z%29%20%3D%20%28x%20%5Cvee%20y%29%20%5Cvee%20z" alt="x \vee ( y \vee z) = (x \vee y)
\vee
z" title="x \\vee ( y \\vee z) = (x \\vee y) \\vee z" /> et ![x + (y + z) = (x
    <ul>
      <li>y) +
z](https://latex.codecogs.com/png.latex?x%20%2B%20%28y%20%2B%20z%29%20%3D%20%28x%20%2B%20y%29%20%2B%20z
‚Äúx + (y + z) = (x + y) + z‚Äù)</li>
    </ul>
  </li>
  <li><em>distributivit√©</em> : <img src="https://latex.codecogs.com/png.latex?x%20%5Cwedge%20%28%20y%20%5Cvee%20z%29%20%3D%20%28x%20%5Cwedge%20y%29%20%5Cvee%20%28x%20%5Cwedge%20z%29" alt="x \wedge ( y \vee z) = (x \wedge y) \vee (x
\wedge
z)" title="x \\wedge ( y \\vee z) = (x \\wedge y) \\vee (x \\wedge z)" /> et <img src="https://latex.codecogs.com/png.latex?x%20.%20%28y%20%2B%20z%29%20%3D%20x%20.%20y%20%2B%20x%20.%20z" alt="x
. (y + z) = x . y + x .
z" title="x . (y + z) = x . y + x . z" /> ou <img src="https://latex.codecogs.com/png.latex?x%20%5Cvee%20%28%20y%20%5Cwedge%20z%29%20%3D%20%28x%20%5Cvee%20y%29%20%5Cwedge%20%28x%20%5Cvee%20z%29" alt="x \vee ( y \wedge z) = (x
\vee y) \wedge (x \vee
z)" title="x \\vee ( y \\wedge z) = (x \\vee y) \\wedge (x \\vee z)" /> et <img src="https://latex.codecogs.com/png.latex?x%20%2B%20%28y%20.%20z%29%20%3D%20%28x%20%2B%20y%29%20.%20%28x%20%2B%20z%29" alt="x +
(y . z) = (x + y) . (x +
z)" title="x + (y . z) = (x + y) . (x + z)" /></li>
  <li><em>loi de Morgan</em> : <img src="https://latex.codecogs.com/png.latex?%5Cneg%28x%20%5Cwedge%20y%29%20%3D%20%5Cneg%20x%20%5Cvee%20%5Cneg%20y" alt="\neg(x \wedge y) = \neg x \vee \neg
y" title="\\neg(x \\wedge y) = \\neg x \\vee \\neg y" /> et <img src="https://latex.codecogs.com/png.latex?%5Coverline%7Bx%20.%20y%7D%20%3D%20%5Coverline%7Bx%7D%20%2B%20%5Coverline%7By%7D" alt="\overline{x . y}
= \overline{x} +
\overline{y}" title="\\overline{x . y} = \\overline{x} + \\overline{y}" /> ou <img src="https://latex.codecogs.com/png.latex?%5Cneg%28x%20%5Cvee%20y%29%20%3D%20%5Cneg%20x%20%5Cwedge%20%5Cneg%20y" alt="\neg(x
\vee y) = \neg x \wedge \neg
y" title="\\neg(x \\vee y) = \\neg x \\wedge \\neg y" /> et <img src="https://latex.codecogs.com/png.latex?%5Coverline%7Bx%20%2B%20y%7D%20%3D%20%5Coverline%7Bx%7D%20.%20%5Coverline%7By%7D" alt="\overline{x + y}
= \overline{x} .
\overline{y}" title="\\overline{x + y} = \\overline{x} . \\overline{y}" /></li>
</ul>

<!-- end list -->

<ol>
  <li>Les fonctions bool√©ennes √©l√©mentaire respectent des r√®gles de
priorit√© : la <em>n√©gation</em> est prioritaire sur la <em>conjonction</em> qui
est prioritaire sur la <em>disjonction</em>.<br />
<strong>Il est recommand√© de mettre des parenth√®ses plut√¥t que d‚Äôappliquer
les r√®gles de priorit√© dans l‚Äô√©criture des expressions bool√©ennes.</strong></li>
</ol>

<h2 id="qcm-types-e3c">QCM types E3C</h2>

<p><strong>Exercice 6</strong></p>

<ol>
  <li>Parmi les quatre expressions suivantes, laquelle s‚Äô√©value en True ?</li>
</ol>

<!-- end list -->

<ul>
  <li>
    <p><strong>R√©ponse A :</strong> <code class="language-plaintext highlighter-rouge">False and (True and False)</code></p>
  </li>
  <li>
    <p><strong>R√©ponse B :</strong> <code class="language-plaintext highlighter-rouge">False or (True and False)</code></p>
  </li>
  <li>
    <p><strong>R√©ponse B :</strong> <code class="language-plaintext highlighter-rouge">True and (True and False)</code></p>
  </li>
  <li>
    <p><strong>R√©ponse C :</strong> <code class="language-plaintext highlighter-rouge">True or (True and False)</code></p>
  </li>
</ul>

<!-- end list -->

<ol>
  <li>Sachant que l‚Äôexpression <code class="language-plaintext highlighter-rouge">not(a or b)</code> a la valeur <code class="language-plaintext highlighter-rouge">True</code>, quelles
peuvent √™tre les valeurs des variables bool√©ennes a et b¬†?</li>
</ol>

<!-- end list -->

<ul>
  <li><strong>R√©ponse A :</strong> <code class="language-plaintext highlighter-rouge">True</code> et <code class="language-plaintext highlighter-rouge">True</code></li>
  <li><strong>R√©ponse B :</strong> <code class="language-plaintext highlighter-rouge">False</code> et <code class="language-plaintext highlighter-rouge">True</code></li>
  <li><strong>R√©ponse C :</strong> <code class="language-plaintext highlighter-rouge">True</code> et <code class="language-plaintext highlighter-rouge">False</code></li>
  <li><strong>R√©ponse D :</strong> <code class="language-plaintext highlighter-rouge">False</code> et <code class="language-plaintext highlighter-rouge">False</code></li>
</ul>

<!-- end list -->

<ol>
  <li>Pour quelles valeurs bool√©ennes des variables <code class="language-plaintext highlighter-rouge">a, b</code> et <code class="language-plaintext highlighter-rouge">c</code>
l‚Äôexpression <code class="language-plaintext highlighter-rouge">(a or b) and (not c)</code> a-t-elle pour valeur <code class="language-plaintext highlighter-rouge">True</code></li>
</ol>

<!-- end list -->

<ul>
  <li><strong>R√©ponse A :</strong> <code class="language-plaintext highlighter-rouge">a = True b = False c = True</code></li>
  <li><strong>R√©ponse B :</strong> <code class="language-plaintext highlighter-rouge">a = True b = False c = False</code></li>
  <li><strong>R√©ponse C :</strong> <code class="language-plaintext highlighter-rouge">a = False b = False c = True</code></li>
  <li><strong>R√©ponse D :</strong> <code class="language-plaintext highlighter-rouge">a = False b = True c = True</code></li>
</ul>

<!-- end list -->

<ol>
  <li>Si A et B sont des variables bool√©ennes, laquelle de ces expressions
bool√©ennes est √©quivalente<br />
√† <code class="language-plaintext highlighter-rouge">(not A) or B</code> ?</li>
</ol>

<!-- end list -->

<ul>
  <li><strong>R√©ponse A :</strong> <code class="language-plaintext highlighter-rouge">(A and B) or (not A and B)</code></li>
  <li><strong>R√©ponse B :</strong> <code class="language-plaintext highlighter-rouge">(A and B) or (not A and B) or (not A and not B)</code></li>
  <li><strong>R√©ponse C :</strong> <code class="language-plaintext highlighter-rouge">(not A and B) or (not A and not B)</code></li>
  <li><strong>R√©ponse D :</strong> <code class="language-plaintext highlighter-rouge">(A and B) or (not A and not B)</code></li>
</ul>

<!-- end list -->

<ol>
  <li>Choisir une expression bool√©enne pour la variable S qui satisfait la
table de v√©rit√© suivante.</li>
</ol>

<table>
  <thead>
    <tr>
      <th style="text-align: left">A</th>
      <th style="text-align: left">B</th>
      <th style="text-align: left">S</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">0</td>
      <td style="text-align: left">0</td>
      <td style="text-align: left">1</td>
    </tr>
    <tr>
      <td style="text-align: left">0</td>
      <td style="text-align: left">1</td>
      <td style="text-align: left">0</td>
    </tr>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left">0</td>
      <td style="text-align: left">1</td>
    </tr>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left">1</td>
      <td style="text-align: left">1</td>
    </tr>
  </tbody>
</table>

<ul>
  <li><strong>R√©ponse A :</strong> A ou (non B)</li>
  <li><strong>R√©ponse B :</strong> (non A) ou B</li>
  <li><strong>R√©ponse C :</strong> (non A) ou (non B)</li>
  <li><strong>R√©ponse D :</strong> non (A ou B)</li>
</ul>

<!-- end list -->

<ol>
  <li>On consid√®re une formule bool√©enne form des variables bool√©ennes <code class="language-plaintext highlighter-rouge">a</code>
et <code class="language-plaintext highlighter-rouge">b</code> dont voici la table de v√©rit√©.</li>
</ol>

<table>
  <thead>
    <tr>
      <th style="text-align: left">a</th>
      <th style="text-align: left">b</th>
      <th>form</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">True</td>
      <td style="text-align: left">True</td>
      <td>False</td>
    </tr>
    <tr>
      <td style="text-align: left">False</td>
      <td style="text-align: left">True</td>
      <td>False</td>
    </tr>
    <tr>
      <td style="text-align: left">True</td>
      <td style="text-align: left">False</td>
      <td>True</td>
    </tr>
    <tr>
      <td style="text-align: left">False</td>
      <td style="text-align: left">False</td>
      <td>False</td>
    </tr>
  </tbody>
</table>

<p>Quelle est cette formule bool√©enne ?</p>

<ul>
  <li><strong>R√©ponse A :</strong> <code class="language-plaintext highlighter-rouge">a and b</code></li>
  <li><strong>R√©ponse B :</strong> <code class="language-plaintext highlighter-rouge">a or b</code></li>
  <li><strong>R√©ponse C :</strong> <code class="language-plaintext highlighter-rouge">a and not(b)</code></li>
  <li><strong>R√©ponse D :</strong> <code class="language-plaintext highlighter-rouge">not(a) or b</code></li>
</ul>

<p><a href="videos/exercice6.mp4">Tutoriel video : exercice 6</a></p>

<h2 id="pour-aller-plus-loin-hors-programme-de-premi√®re-nsi">Pour aller plus loin (hors programme de premi√®re NSI)</h2>

<h3 id="dresser-la-table-de-v√©rit√©-dune-fonction-bool√©enne">Dresser la table de v√©rit√© d‚Äôune fonction bool√©enne</h3>

<p><strong>Exercice 7</strong></p>

<p>D√©montrer dans chaque cas l‚Äô√©galit√© des expressions bool√©ennes en
utilisant les deux m√©thodes suivantes :</p>

<ul>
  <li>
    <p><strong>M√©thode 1</strong> : en comparant les tables de v√©rit√© des deux
expressions bool√©ennes ;</p>
  </li>
  <li>
    <p><strong>M√©thode 2</strong> : en utilisant les r√®gles de simplification de la
propri√©t√© 2.</p>
  </li>
</ul>

<!-- end list -->

<ol>
  <li><img src="https://latex.codecogs.com/png.latex?x%20%2B%20x%20.%20y%20%3D%20x" alt="x + x . y =
x" title="x + x . y = x" /></li>
  <li><img src="https://latex.codecogs.com/png.latex?x%20%2B%20%5Coverline%7Bx%7D%20.%20y%3D%20x%20%2B%20y" alt="x + \overline{x} . y= x +
y" title="x + \\overline{x} . y= x + y" /></li>
  <li><img src="https://latex.codecogs.com/png.latex?x%20.%20z%20%2B%20%5Coverline%7Bx%7D%20.%20y%20%2B%20y%20.%20z%20%3D%20x%20.%20z%20%2B%20%5Coverline%7Bx%7D%20.%20y" alt="x . z + \overline{x} . y + y . z = x . z + \overline{x} .
y" title="x . z + \\overline{x} . y + y . z = x . z + \\overline{x} . y" /></li>
  <li><img src="https://latex.codecogs.com/png.latex?%5Coverline%7By%20.%20%28x%20%2B%20%5Coverline%7By%7D%29%7D%20%3D%20%5Coverline%7Bx%7D%20%2B%20%5Coverline%7By%7D" alt="\overline{y . (x + \overline{y})} = \overline{x} +
\overline{y}" title="\\overline{y . (x + \\overline{y})} = \\overline{x} + \\overline{y}" /></li>
  <li><img src="https://latex.codecogs.com/png.latex?x%20.%20%28%20%5Coverline%7Bx%7D%20%2B%20%5Coverline%7By%7D%29%20.%20%28x%20%2B%20y%29%20%3D%20x%20.%20%5Coverline%7By%7D" alt="x . ( \overline{x} + \overline{y}) . (x + y) = x .
\overline{y}" title="x . ( \\overline{x} + \\overline{y}) . (x + y) = x . \\overline{y}" /></li>
</ol>

<h3 id="exprimer-une-fonction-bool√©enne-√†-partir-de-sa-table-de-v√©rit√©">Exprimer une fonction bool√©enne √† partir de sa table de v√©rit√©</h3>

<p><strong>Exercice 8</strong></p>

<p>On consid√®re la fonction bool√©enne dont la table de v√©rit√© est :</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="https://latex.codecogs.com/png.latex?x" alt="x" title="x" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?y" alt="y" title="y" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?f%28x%2C%20y%29" alt="f(x, y)" title="f(x, y)" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>1</td>
      <td>0</td>
    </tr>
  </tbody>
</table>

<ol>
  <li>Exprimer chacune des lignes o√π la fonction prend la valeur
<img src="https://latex.codecogs.com/png.latex?1" alt="1" title="1" /> comme la
<em>conjonction</em> des entr√©es en rempla√ßant chaque
<img src="https://latex.codecogs.com/png.latex?1" alt="1" title="1" /> par la variable
qu‚Äôil repr√©sente et chaque
<img src="https://latex.codecogs.com/png.latex?0" alt="0" title="0" /> par la n√©gation de
la variable. Par exemple le
<img src="https://latex.codecogs.com/png.latex?1" alt="1" title="1" /> de la deuxi√®me
ligne s‚Äô√©crira <img src="https://latex.codecogs.com/png.latex?%5Coverline%7Bx%7D%20.%20y" alt="\overline{x} .
y" title="\\overline{x} . y" />.</li>
  <li>On peut alors √©crire
<img src="https://latex.codecogs.com/png.latex?f%28x%2Cy%29" alt="f(x,y)" title="f(x,y)" /> comme la <em>disjonction</em> des <em>formes conjonctives</em> obtenues
√† la question pr√©c√©dente. En d√©duire une expression bool√©enne de
<img src="https://latex.codecogs.com/png.latex?f%28x%2C%20y%29" alt="f(x, y)" title="f(x, y)" />.</li>
  <li>Ouvrir le logiciel <a href="http://www.cburch.com/logisim/">Logisim</a> et
construire une porte logique repr√©sentant cette fonction bool√©enne.</li>
  <li>Cette fonction s‚Äôappelle <code class="language-plaintext highlighter-rouge">OU EXCLUSIF</code> ou <code class="language-plaintext highlighter-rouge">XOR</code>. Ce nom vous
para√Æt-il bien choisi ?</li>
</ol>

<p><strong>Voici les repr√©sentations symboliques de la porte logique <code class="language-plaintext highlighter-rouge">XOR</code> :</strong></p>

<p><img src="images/porte_xor_european.png" alt="Porte XOR europeenne" /><br />
&amp; <img src="images/porte_xor_american.png" alt="Porte XOR americaine" /></p>

<h1 id="circuits-combinatoires">Circuits combinatoires</h1>

<h2 id="d√©finition">D√©finition</h2>

<p><strong>D√©finition 3</strong></p>

<p>Un <strong>circuit logique combinatoire</strong> permet de r√©aliser une ou plusieurs
fonctions bool√©ennes : ses sorties ne d√©pendent que de l‚Äô√©tat actuel de
ses entr√©es. Les portes logiques <code class="language-plaintext highlighter-rouge">NOT</code>, <code class="language-plaintext highlighter-rouge">NOR</code>, <code class="language-plaintext highlighter-rouge">NAND</code>, <code class="language-plaintext highlighter-rouge">AND</code>, <code class="language-plaintext highlighter-rouge">OR</code> et
<code class="language-plaintext highlighter-rouge">XOR</code> sont des circuits combinatoires.</p>

<p>Il existe d‚Äôautres circuits, dits s√©quentiels, dont les sorties se
calculent non seulement √† partir de leurs valeurs d‚Äôentr√©e actuelles
mais aussi √† partir de leurs √©tats pr√©c√©dents : le facteur temps
intervient. Ils utilisent des circuits de m√©moire pour m√©moriser leurs
√©tats ant√©rieurs.</p>

<p><strong>Exercice 9</strong></p>

<p>On consid√®re la fonction bool√©eenne
<img src="https://latex.codecogs.com/png.latex?f" alt="f" title="f" /> dont la table de v√©rit√©
est donn√©e ci-dessous :</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="https://latex.codecogs.com/png.latex?x" alt="x" title="x" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?y" alt="y" title="y" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?f%28x%2C%20y%29" alt="f(x, y)" title="f(x, y)" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>1</td>
      <td>1</td>
    </tr>
  </tbody>
</table>

<ol>
  <li>
    <p>En utilisant la m√©thode expos√©e dans l‚Äôexercice 8, d√©terminer une
expression bool√©enne de la fonction
<img src="https://latex.codecogs.com/png.latex?f" alt="f" title="f" />.</p>
  </li>
  <li>
    <p>Ouvrir le logiciel <a href="http://www.cburch.com/logisim/">Logisim</a> et
construire un circuit combinatoire repr√©sentant cette fonction
bool√©enne :</p>

    <ul>
      <li>En utilisant les portes logiques <code class="language-plaintext highlighter-rouge">NOT</code>, <code class="language-plaintext highlighter-rouge">NOR</code>, <code class="language-plaintext highlighter-rouge">NAND</code>, <code class="language-plaintext highlighter-rouge">AND</code>,
<code class="language-plaintext highlighter-rouge">OR</code> ou <code class="language-plaintext highlighter-rouge">XOR</code>.</li>
      <li>En n‚Äôutilisant que des portes logiques <code class="language-plaintext highlighter-rouge">NOT</code>, <code class="language-plaintext highlighter-rouge">AND</code> ou <code class="language-plaintext highlighter-rouge">OR</code>.</li>
      <li>En n‚Äôutilisant que des portes logiques <code class="language-plaintext highlighter-rouge">NOR</code>.</li>
    </ul>
  </li>
</ol>

<p><a href="videos/exercice9.mp4">Tutoriel video : exercice 9</a></p>

<h2 id="d√©codeur-avec-2-bits-dentr√©es">D√©codeur avec 2 bits d‚Äôentr√©es</h2>

<p><strong>Exercice 10</strong></p>

<p>On consid√®re un circuit combinatoire qui poss√®de deux entr√©es
<img src="https://latex.codecogs.com/png.latex?e_%7B0%7D" alt="e_{0}" title="e_{0}" /> et
<img src="https://latex.codecogs.com/png.latex?e_%7B1%7D" alt="e_{1}" title="e_{1}" /> et
quatre sorties <img src="https://latex.codecogs.com/png.latex?s_%7B0%7D" alt="s_{0}" title="s_{0}" />, <img src="https://latex.codecogs.com/png.latex?s_%7B1%7D" alt="s_{1}" title="s_{1}" />, <img src="https://latex.codecogs.com/png.latex?s_%7B2%7D" alt="s_{2}" title="s_{2}" /> et <img src="https://latex.codecogs.com/png.latex?s_%7B3%7D" alt="s_{3}" title="s_{3}" />.</p>

<p>La sortie index√©e par le nombre dont le bit de poids faible est
<img src="https://latex.codecogs.com/png.latex?e_%7B0%7D" alt="e_{0}" title="e_{0}" /> et le
bit de poids fort
<img src="https://latex.codecogs.com/png.latex?e_%7B1%7D" alt="e_{1}" title="e_{1}" />, est
positionn√©e √† <img src="https://latex.codecogs.com/png.latex?1" alt="1" title="1" /> et les
autres sorties √† <img src="https://latex.codecogs.com/png.latex?0" alt="0" title="0" />. Ce
circuit est ainsi appel√© <strong>d√©codeur
<img src="https://latex.codecogs.com/png.latex?2" alt="2" title="2" /> bits</strong>.</p>

<ol>
  <li>Compl√©ter la table de v√©rit√© de ce circuit combinatoire.</li>
</ol>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="https://latex.codecogs.com/png.latex?e_%7B0%7D" alt="e_{0}" title="e_{0}" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?e_%7B1%7D" alt="e_{1}" title="e_{1}" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?s_%7B0%7D" alt="s_{0}" title="s_{0}" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?s_%7B1%7D" alt="s_{1}" title="s_{1}" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?s_%7B2%7D" alt="s_{2}" title="s_{2}" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?s_%7B3%7D" alt="s_{3}" title="s_{3}" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td>0</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td>1</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>0</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>1</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
    </tr>
  </tbody>
</table>

<ol>
  <li>
    <p>En utilisant la m√©thode expos√©e dans l‚Äôexercice 7, d√©terminer une
expression bool√©enne de chacune des sorties
<img src="https://latex.codecogs.com/png.latex?s_%7B0%7D" alt="s_{0}" title="s_{0}" />,
<img src="https://latex.codecogs.com/png.latex?s_%7B1%7D" alt="s_{1}" title="s_{1}" />,
<img src="https://latex.codecogs.com/png.latex?s_%7B2%7D" alt="s_{2}" title="s_{2}" /> et
<img src="https://latex.codecogs.com/png.latex?s_%7B3%7D" alt="s_{3}" title="s_{3}" />,
en fonction des entr√©es
<img src="https://latex.codecogs.com/png.latex?e_%7B0%7D" alt="e_{0}" title="e_{0}" /> et
<img src="https://latex.codecogs.com/png.latex?e_%7B1%7D" alt="e_{1}" title="e_{1}" />.</p>
  </li>
  <li>
    <p>Ouvrir le logiciel <a href="http://www.cburch.com/logisim/">Logisim</a> et
construire un circuit combinatoire repr√©sentant un <strong>d√©codeur
<img src="https://latex.codecogs.com/png.latex?2" alt="2" title="2" /> bits</strong>.</p>
  </li>
</ol>

<h2 id="demi-additionneur-et-additionneur-1-bit">Demi-additionneur et additionneur 1 bit</h2>

<p><strong>Exercice 11</strong></p>

<ol>
  <li>
    <p>Effectuer les additions binaires :
<img src="https://latex.codecogs.com/png.latex?0%2B0" alt="0+0" title="0+0" />,
<img src="https://latex.codecogs.com/png.latex?0%2B1" alt="0+1" title="0+1" />,
<img src="https://latex.codecogs.com/png.latex?1%2B0" alt="1+0" title="1+0" /> et
<img src="https://latex.codecogs.com/png.latex?1%2B1" alt="1+1" title="1+1" />.</p>
  </li>
  <li>
    <p>Un <strong>demi-additionneur binaire 1 bit</strong> est un circuit combinatoire
qui poss√®de :</p>

    <ul>
      <li>deux entr√©es : deux bits d‚Äôop√©rande
<img src="https://latex.codecogs.com/png.latex?e_%7B0%7D" alt="e_{0}" title="e_{0}" /> et
<img src="https://latex.codecogs.com/png.latex?e_%7B1%7D" alt="e_{1}" title="e_{1}" /> ;</li>
      <li>deux sorties : un bit de r√©sultat
<img src="https://latex.codecogs.com/png.latex?s" alt="s" title="s" /> et un bit de
retenue sortante <img src="https://latex.codecogs.com/png.latex?r" alt="r" title="r" />.</li>
    </ul>
  </li>
</ol>

<p>La sortie <img src="https://latex.codecogs.com/png.latex?s" alt="s" title="s" /> prend pour
valeur le bit des unit√©s et la sortie
<img src="https://latex.codecogs.com/png.latex?r" alt="r" title="r" /> le bit de retenue
sortante, lorsqu‚Äôon additionne les deux bits d‚Äôentr√©e
<img src="https://latex.codecogs.com/png.latex?e_%7B0%7D" alt="e_{0}" title="e_{0}" /> et
<img src="https://latex.codecogs.com/png.latex?e_%7B1%7D" alt="e_{1}" title="e_{1}" />.</p>

<ol>
  <li>Compl√©ter la table de v√©rit√© de ce circuit combinatoire :</li>
</ol>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="https://latex.codecogs.com/png.latex?e_%7B0%7D" alt="e_{0}" title="e_{0}" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?e_%7B1%7D" alt="e_{1}" title="e_{1}" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?s" alt="s" title="s" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?r" alt="r" title="r" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td>0</td>
      <td>¬†</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td>1</td>
      <td>¬†</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>0</td>
      <td>¬†</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>1</td>
      <td>¬†</td>
      <td>¬†</td>
    </tr>
  </tbody>
</table>

<ol>
  <li>Justifier qu‚Äôun <strong>demi-additionneur binaire 1 bit</strong> peut √™tre
repr√©sent√© par le circuit ci-dessous.</li>
</ol>

<p><img src="images/demi_additionneur.png" alt="Demi-additionneur binaire" /></p>

<ol>
  <li>Ouvrir le logiciel <a href="http://www.cburch.com/logisim/">Logisim</a> et
construire un circuit combinatoire repr√©sentant un
<strong>demi-additionneur binaire 1 bit</strong>.</li>
</ol>

<p><a href="videos/exercice11.mp4">Tutoriel video : exercice 11</a></p>

<p><strong>Exercice 12</strong></p>

<p>Un <strong>additionneur binaire 1 bit</strong> est un circuit combinatoire qui
poss√®de :</p>

<ul>
  <li>trois entr√©es : deux bits d‚Äôop√©rande
<img src="https://latex.codecogs.com/png.latex?e_%7B0%7D" alt="e_{0}" title="e_{0}" /> et
<img src="https://latex.codecogs.com/png.latex?e_%7B1%7D" alt="e_{1}" title="e_{1}" /> et
un bit de retenue entrante
<img src="https://latex.codecogs.com/png.latex?r_%7B0%7D" alt="r_{0}" title="r_{0}" /></li>
  <li>deux bits de sortie : un bit de r√©sultat
<img src="https://latex.codecogs.com/png.latex?s_%7B2%7D" alt="s_{2}" title="s_{2}" /> et
un bit de retenue sortante
<img src="https://latex.codecogs.com/png.latex?r_%7B3%7D" alt="r_{3}" title="r_{3}" />.</li>
</ul>

<!-- end list -->

<ol>
  <li>Compl√©ter les colonnes de la table de v√©rit√© d‚Äôun <strong>additionneur
binaire 1 bit</strong> pour le bit de r√©sultat
<img src="https://latex.codecogs.com/png.latex?s_%7B2%7D" alt="s_{2}" title="s_{2}" /> et
le bit retenue sortante
<img src="https://latex.codecogs.com/png.latex?r_%7B3%7D" alt="r_{3}" title="r_{3}" />.</li>
</ol>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="https://latex.codecogs.com/png.latex?e_%7B0%7D" alt="e_{0}" title="e_{0}" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?e_%7B1%7D" alt="e_{1}" title="e_{1}" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?r_%7B0%7D" alt="r_{0}" title="r_{0}" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?s_%7B1%7D%3D%5Cldots%20%5Cldots" alt="s_{1}=\ldots \ldots" title="s_{1}=\\ldots \\ldots" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?r_%7B1%7D%3D%5Cldots%20%5Cldots" alt="r_{1}=\ldots \ldots" title="r_{1}=\\ldots \\ldots" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?s_%7B2%7D%3D%5Cldots%20%5Cldots" alt="s_{2}=\ldots \ldots" title="s_{2}=\\ldots \\ldots" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?r_%7B2%7D%3D%5Cldots%20%5Cldots" alt="r_{2}=\ldots \ldots" title="r_{2}=\\ldots \\ldots" /></th>
      <th><img src="https://latex.codecogs.com/png.latex?r_%7B3%7D%3D%5Cldots%20%5Cldots" alt="r_{3}=\ldots \ldots" title="r_{3}=\\ldots \\ldots" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td>0</td>
      <td>0</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td>1</td>
      <td>0</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>0</td>
      <td>0</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>1</td>
      <td>0</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td>0</td>
      <td>1</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td>1</td>
      <td>1</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>0</td>
      <td>1</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td>1</td>
      <td>1</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
      <td>¬†</td>
    </tr>
  </tbody>
</table>

<ol>
  <li>
    <p>Un <strong>additionneur binaire 1 bit</strong> peut √™tre r√©alis√© √† l‚Äôaide de deux
<strong>demi-additionneurs binaires 1 bit</strong> :</p>

    <ul>
      <li>Le premier <strong>demi-additionneur binaire 1 bit</strong> prend en entr√©e
les bits d‚Äôop√©rande
<img src="https://latex.codecogs.com/png.latex?e_%7B0%7D" alt="e_{0}" title="e_{0}" /> et
<img src="https://latex.codecogs.com/png.latex?e_%7B1%7D" alt="e_{1}" title="e_{1}" /> et retourne en sortie un bit de r√©sultat interm√©diaire
<img src="https://latex.codecogs.com/png.latex?s_%7B1%7D" alt="s_{1}" title="s_{1}" /> et un bit de retenue sortante interm√©diaire
<img src="https://latex.codecogs.com/png.latex?r_%7B1%7D" alt="r_{1}" title="r_{1}" />. Donner une expression bool√©enne de
<img src="https://latex.codecogs.com/png.latex?s_%7B1%7D" alt="s_{1}" title="s_{1}" /> et
<img src="https://latex.codecogs.com/png.latex?r_%7B1%7D" alt="r_{1}" title="r_{1}" /> en fonction de
<img src="https://latex.codecogs.com/png.latex?e_%7B0%7D" alt="e_{0}" title="e_{0}" /> et
<img src="https://latex.codecogs.com/png.latex?e_%7B1%7D" alt="e_{1}" title="e_{1}" />.</li>
      <li>Le second <strong>demi-additionneur binaire 1 bit</strong> prend en entr√©e le
bit de r√©sultat
<img src="https://latex.codecogs.com/png.latex?s_%7B1%7D" alt="s_{1}" title="s_{1}" /> et le bit de retenue entrante
<img src="https://latex.codecogs.com/png.latex?r_%7B0%7D" alt="r_{0}" title="r_{0}" /> et retourne en sortie le bit de r√©sultat final
<img src="https://latex.codecogs.com/png.latex?s_%7B2%7D" alt="s_{2}" title="s_{2}" /> et un bit de retenue sortante interm√©diaire
<img src="https://latex.codecogs.com/png.latex?r_%7B2%7D" alt="r_{2}" title="r_{2}" />. Donner une expression bool√©enne de
<img src="https://latex.codecogs.com/png.latex?s_%7B2%7D" alt="s_{2}" title="s_{2}" /> et
<img src="https://latex.codecogs.com/png.latex?r_%7B2%7D" alt="r_{2}" title="r_{2}" /> en fonction de
<img src="https://latex.codecogs.com/png.latex?s_%7B1%7D" alt="s_{1}" title="s_{1}" /> et
<img src="https://latex.codecogs.com/png.latex?r_%7B0%7D" alt="r_{0}" title="r_{0}" />.</li>
      <li>Enfin, la retenue sortante
<img src="https://latex.codecogs.com/png.latex?r_%7B3%7D" alt="r_{3}" title="r_{3}" /> s‚Äôobtient √† partir de la retenue sortante
<img src="https://latex.codecogs.com/png.latex?r_%7B1%7D" alt="r_{1}" title="r_{1}" /> du premier demi-additionneur et de la retenue sortante
<img src="https://latex.codecogs.com/png.latex?r_%7B2%7D" alt="r_{2}" title="r_{2}" /> du second. Donner une expression bool√©enne de
<img src="https://latex.codecogs.com/png.latex?r_%7B3%7D" alt="r_{3}" title="r_{3}" /> en fonction de
<img src="https://latex.codecogs.com/png.latex?r_%7B1%7D" alt="r_{1}" title="r_{1}" /> et
<img src="https://latex.codecogs.com/png.latex?r_%7B2%7D" alt="r_{2}" title="r_{2}" />.</li>
    </ul>

    <p>Compl√©ter les colonnes
<img src="https://latex.codecogs.com/png.latex?s_%7B1%7D" alt="s_{1}" title="s_{1}" />,
<img src="https://latex.codecogs.com/png.latex?r_%7B1%7D" alt="r_{1}" title="r_{1}" /> et
<img src="https://latex.codecogs.com/png.latex?r_%7B2%7D" alt="r_{2}" title="r_{2}" />
puis <img src="https://latex.codecogs.com/png.latex?s_%7B2%7D" alt="s_{2}" title="s_{2}" /> et <img src="https://latex.codecogs.com/png.latex?r_%7B3%7D" alt="r_{3}" title="r_{3}" /> de la table de v√©rit√© de l‚Äô<strong>additionneur binaire √† 1
bit</strong>.</p>
  </li>
  <li>
    <p>Avec le logiciel <a href="http://www.cburch.com/logisim/">Logisim</a> ouvrir le
fichier contenant le demi-additionneur de l‚Äôexercice pr√©c√©dent.</p>

    <ul>
      <li>Ajouter un nouveau circuit avec <code class="language-plaintext highlighter-rouge">Add a circuit</code> , le nommer
<code class="language-plaintext highlighter-rouge">additionneur1bit</code> puis copier/coller dedans le circuit du
<strong>demi-additionneur binaire 1 bit</strong>. Compl√©ter le circuit pour
obtenir un <strong>additionneur binaire 1 bit</strong>.</li>
      <li>Ajouter un nouveau circuit avec <code class="language-plaintext highlighter-rouge">Add a circuit</code> , le nommer
<code class="language-plaintext highlighter-rouge">additionneur2bits</code> puis copier/coller dedans le circuit de l‚Äô
<strong>additionneur binaire 1 bit</strong>. Compl√©ter le circuit pour
obtenir un <strong>additionneur binaire 2 bits</strong>.</li>
    </ul>
  </li>
</ol>

<p><a href="videos/exercice12.mp4">Tutoriel video : exercice 12</a></p>

<h1 id="op√©rations-bit-√†-bit-en-python-hors-programme-de-premi√®re-nsi">Op√©rations bit √† bit en <code class="language-plaintext highlighter-rouge">Python</code> (hors programme de premi√®re NSI)</h1>

<p><strong>Propri√©t√© 3</strong></p>

<p>Les fonctions bool√©ennes √©l√©mentaires (<code class="language-plaintext highlighter-rouge">OR</code>, <code class="language-plaintext highlighter-rouge">AND</code>, <code class="language-plaintext highlighter-rouge">NOT</code>, <code class="language-plaintext highlighter-rouge">XOR</code>)
existent en <code class="language-plaintext highlighter-rouge">Python</code> sous la forme d‚Äôop√©rateurs bool√©ens mais sont
√©galement impl√©ment√©s sous la forme d‚Äôop√©rateurs bit √† bit sur les
nombres. Un <em>op√©rateur bit √† bit</em> (<em>bitwise</em> en anglais) s‚Äôapplique sur
les bits de m√™me poids des repr√©sentations binaires de ses op√©randes.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Op√©rateur bool√©en</th>
      <th>Op√©rateur bit √† bit</th>
      <th style="text-align: left">Exemple</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">and</code> , ET</td>
      <td><code class="language-plaintext highlighter-rouge">&amp;</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">&gt;&gt;&gt; bin(0b101001 &amp; 0b101010)</code></td>
    </tr>
    <tr>
      <td style="text-align: left">¬†</td>
      <td>¬†</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">'0b101000'</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">or</code> , OU</td>
      <td><code class="language-plaintext highlighter-rouge">\|</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">&gt;&gt;&gt; bin(0b101001 \| 0b101010)</code></td>
    </tr>
    <tr>
      <td style="text-align: left">¬†</td>
      <td>¬†</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">'0b101011'</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">xor</code> , OU EXCLUSIF</td>
      <td><code class="language-plaintext highlighter-rouge">^</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">&gt;&gt;&gt; bin(0b101001 ^ 0b101010)</code></td>
    </tr>
    <tr>
      <td style="text-align: left">¬†</td>
      <td>¬†</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">'0b000011'</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">not</code> , NEGATION</td>
      <td><code class="language-plaintext highlighter-rouge">~</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">&gt;&gt;&gt; ~5 #~x retourne -x - 1</code></td>
    </tr>
    <tr>
      <td style="text-align: left">¬†</td>
      <td>¬†</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">-6</code></td>
    </tr>
  </tbody>
</table>

<p>Exemples d‚Äôutilisation d‚Äôop√©rateurs bit √† bit :</p>

<ul>
  <li>On peut utiliser le <code class="language-plaintext highlighter-rouge">ET</code> bit √† bit pour s√©lectionner uniquement
certains bits, par exemple les bits de rang pairs :</li>
</ul>

<!-- end list -->

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">bits_pairs</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="mi">2</span> <span class="o">**</span> <span class="n">k</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">bin</span><span class="p">(</span><span class="n">bits_pairs</span><span class="p">)</span>
<span class="s">'0b1010101'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">bin</span><span class="p">(</span><span class="mi">183</span><span class="p">)</span>
<span class="s">'0b10110111'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">bin</span><span class="p">(</span><span class="mi">183</span> <span class="o">&amp;</span> <span class="n">bits_pairs</span><span class="p">)</span>
<span class="s">'0b10100010'</span>
</code></pre></div></div>

<ul>
  <li>Le <code class="language-plaintext highlighter-rouge">OU EXCLUSIF</code> peut servir √† masquer / d√©masquer une partie de la
repr√©sentation binaire d‚Äôun nombre (on peut l‚Äôemployer avec tout
objet cod√© num√©riquement comme une image ou un caract√®re).</li>
</ul>

<!-- end list -->

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">diego</span> <span class="o">=</span> <span class="mi">69</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">masque</span> <span class="o">=</span> <span class="mi">42</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">zorro</span> <span class="o">=</span> <span class="n">diego</span> <span class="o">^</span> <span class="n">masque</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">zorro</span>
<span class="mi">111</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">zorro</span> <span class="o">^</span> <span class="n">masque</span>
<span class="mi">69</span>
</code></pre></div></div>

<p><strong>Exercice 13</strong></p>

<p>Dans un r√©seau <code class="language-plaintext highlighter-rouge">IP</code> l‚Äôadresse <code class="language-plaintext highlighter-rouge">IP</code> d‚Äôune machine est constitu√©e d‚Äôun
pr√©fixe correspondant √† l‚Äôadresse du r√©seau (commune √† toutes les
machines du r√©seau) et √† un suffixe machine, identifiant la machine sur
le r√©seau.</p>

<p>Le pr√©fixe r√©seau s‚Äôobtient √† partir de l‚Äôadresse <code class="language-plaintext highlighter-rouge">IP</code> de la machine en
faisant un <code class="language-plaintext highlighter-rouge">ET</code> bit √† bit avec le masque de sous-r√©seau.</p>

<p>Par exemple si l‚Äôadresse est <code class="language-plaintext highlighter-rouge">192.168.11.12</code> de repr√©sentation binaire
<code class="language-plaintext highlighter-rouge">11000000.10101000.00001011.00001011</code> et le masque de sous-r√©seau est
<code class="language-plaintext highlighter-rouge">255.255.252.0</code> de repr√©sentation binaire</p>

<p><code class="language-plaintext highlighter-rouge">11111111.11111111.11111100.00000000</code> alors le pr√©fixe r√©seau est
<code class="language-plaintext highlighter-rouge">11000000.10101000.00001000.00000000</code> soit <code class="language-plaintext highlighter-rouge">192.168.8.0</code>.</p>

<p>On donne ci-dessous deux fonctions outils :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">ip2liste</span><span class="p">(</span><span class="n">ip</span><span class="p">):</span>
    <span class="s">"Transforme une  adresse IP V4 (type str) en liste d'entiers"</span>
    <span class="k">return</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">champ</span><span class="p">)</span> <span class="k">for</span> <span class="n">champ</span> <span class="ow">in</span> <span class="n">ip</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'.'</span><span class="p">)]</span>

<span class="k">def</span> <span class="nf">liste2ip</span><span class="p">(</span><span class="n">ipliste</span><span class="p">):</span>
    <span class="s">"Transforme une  liste d'entiers en adresse IP V4 (type str)"</span>
    <span class="k">return</span> <span class="s">'.'</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">ipliste</span><span class="p">)</span>
</code></pre></div></div>

<ol>
  <li>
    <p>√âcrire une fonction de signature <code class="language-plaintext highlighter-rouge">prefixe_reseau(ip, masque)</code> qui
retourne le pr√©fixe r√©seau sous forme d‚Äôadresse IP V4 (type <code class="language-plaintext highlighter-rouge">str</code>) √†
partir d‚Äôune adresse IP V4 et d‚Äôun masque de sous-r√©seau.</p>
  </li>
  <li>
    <p>√âcrire une fonction de signature <code class="language-plaintext highlighter-rouge">suffixe_machine(ip, masque)</code> qui
retourne le suffixe machine sous forme d‚Äôadresse IP V4 (type <code class="language-plaintext highlighter-rouge">str</code>)
√† partir d‚Äôune adresse IP V4 et d‚Äôun masque de sous-r√©seau.</p>
  </li>
</ol>

<p>Voici un exemple de r√©sultat attendu :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">prefixe_reseau</span><span class="p">(</span><span class="s">'145.245.11.254'</span><span class="p">,</span><span class="s">'255.255.252.0'</span><span class="p">)</span>
<span class="s">'145.245.8.0'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">suffixe_machine</span><span class="p">(</span><span class="s">'145.245.11.254'</span><span class="p">,</span><span class="s">'255.255.252.0'</span><span class="p">)</span>
<span class="s">'0.0.3.254'</span>
</code></pre></div></div>

<p><strong>Propri√©t√© 4</strong></p>

<p><code class="language-plaintext highlighter-rouge">Python</code> d√©finit √©galement des op√©rateurs sur les bits d‚Äôun nombre, plus
efficaces que les op√©rations math√©matiques √©quivalentes :</p>

<ul>
  <li>
    <p>Le d√©calage de <code class="language-plaintext highlighter-rouge">nombre</code> de <code class="language-plaintext highlighter-rouge">n</code> bits vers la gauche multiplie
<code class="language-plaintext highlighter-rouge">nombre</code> par
<img src="https://latex.codecogs.com/png.latex?2%5E%7Bn%7D" alt="2^{n}" title="2^{n}" />
et s‚Äô√©crit <code class="language-plaintext highlighter-rouge">nombre &lt;&lt; n</code>.</p>
  </li>
  <li>
    <p>Le d√©calage de <code class="language-plaintext highlighter-rouge">nombre</code> de <code class="language-plaintext highlighter-rouge">n</code> bits vers la droite divise <code class="language-plaintext highlighter-rouge">nombre</code>
par <img src="https://latex.codecogs.com/png.latex?2%5E%7Bn%7D" alt="2^{n}" title="2^{n}" /> et s‚Äô√©crit <code class="language-plaintext highlighter-rouge">nombre &gt;&gt; n</code>.</p>
  </li>
</ul>

<p><strong>Exercice 14</strong></p>

<p>Dans l‚Äôalgorithme de recherche dichotomique, apr√®s division en deux de
la zone de recherche, l‚Äôalgorithme s‚Äôappelle lui-m√™me sur l‚Äôune des deux
moiti√©s. C‚Äôest un algorithme de type <em>Diviser pour r√©gner</em> qui peut se
programmer r√©cursivement comme nous le verrons en terminale dans le
chapitre sur la r√©cursivit√©.</p>

<p>Si on note <em>n</em> la taille de la liste, une autre impl√©mentation, non
r√©cursive, est la suivante :</p>

<ul>
  <li>
    <p>on commence la recherche au d√©but de la liste et on avance avec un
pas <code class="language-plaintext highlighter-rouge">pas = n // 2</code> ou <code class="language-plaintext highlighter-rouge">pas = n &gt;&gt; 1</code> jusqu‚Äôau premier √©l√©ment
sup√©rieur √† l‚Äô√©l√©ment cherch√© ;</p>
  </li>
  <li>
    <p>on repart de l‚Äô√©l√©ment pr√©c√©dent le point d‚Äôarr√™t et on avance
d√©sormais avec un pas divis√© par 2 soit :</p>

    <p><code class="language-plaintext highlighter-rouge">pas = pas &gt;&gt; 1</code> ;</p>
  </li>
  <li>
    <p>on r√©p√®te en boucle ces instructions jusqu‚Äô√† ce que le pas atteigne
<img src="https://latex.codecogs.com/png.latex?1" alt="1" title="1" />.</p>
  </li>
</ul>

<p>A la fin de de la boucle, on d√©termine si l‚Äô√©l√©ment pr√©c√©dent le dernier
point d‚Äôarr√™t est l‚Äô√©l√©ment recherch√©.</p>

<p>Compl√©ter le code de la fonction <code class="language-plaintext highlighter-rouge">recherche_dicho2</code> qui impl√©mente cet
algorithme.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">recherche_dicho2</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">e</span><span class="p">):</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">n</span>  <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">L</span><span class="p">)</span>
    <span class="n">pas</span> <span class="o">=</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="n">pas</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">while</span> <span class="n">x</span> <span class="o">+</span> <span class="n">pas</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">and</span> <span class="p">.................:</span>
            <span class="n">x</span> <span class="o">=</span> <span class="p">..............</span>
        <span class="n">pas</span> <span class="o">=</span> <span class="p">................</span>
    <span class="k">return</span> <span class="p">............</span>
</code></pre></div></div>
:ET