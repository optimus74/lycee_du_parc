I"õ˚<!-- D√©finition des hyperliens  -->

<h1 id="cr√©dits--">Cr√©dits {-}</h1>

<p><em>Ce cours est inspir√© du chapitre 14 du manuel NSI de la collection Tortue chez Ellipse,  auteurs : Ballabonski, Conchon, Filliatre, N‚ÄôGuyen. J‚Äôai √©galement consult√© le prepabac Premi√®re NSI de Guillaume Connan chez Hatier, le <a href="https://cache.media.eduscol.education.fr/file/NSI/77/7/RA_Lycee_G_NSI_repd_types_construits_1170777.pdf">document ressource  eduscol sur les types construits</a> et le livre <strong>Fluent Python</strong>.</em></p>

<h1 id="p-uplets-nomm√©s-et-dictionnaires"><code class="language-plaintext highlighter-rouge">p-uplets</code> nomm√©s et dictionnaires</h1>

<p>:::exemple
Dans le TP sur les <strong>p-uplets</strong> (nomm√©s aussi <strong>tuples</strong>) on a travaill√© sur un fichier <code class="language-plaintext highlighter-rouge">airports-reduit.csv</code> qui contient les  enregistrements <code class="language-plaintext highlighter-rouge">nom;latitude;longitude;altitude;code_pays</code> pour  57302  a√©roports et on a extrait cette s√©rie dans un tableau de <strong>tuples</strong>. Par exemple le <strong>tuple</strong> correspondant √† l‚Äôa√©roport Saint-Exup√©ry est :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">p_uplet</span> <span class="o">=</span> <span class="n">tab_tuple_airports</span><span class="p">[</span><span class="mi">32478</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">p_uplet</span>
<span class="p">(</span><span class="s">'Lyon Saint-Exup√©ry Airport'</span><span class="p">,</span> <span class="s">'45.725556'</span><span class="p">,</span> <span class="s">'5.081111'</span><span class="p">,</span> <span class="s">'821'</span><span class="p">,</span> <span class="s">'FR'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">p_uplet</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="s">'45.725556'</span>
</code></pre></div></div>

<p>Pour traiter cette information, il faut conna√Ætre la signification de chaque √©l√©ment (appel√© aussi <em>champ</em>) du <strong>tuple</strong>  puisqu‚Äôon  y acc√®de  par son  index entier   :   0 pour le ‚Äònom‚Äô,  1 pour la latitude etc ‚Ä¶.</p>

<p>Il serait plus lisible de disposer d‚Äôun <strong>tuple</strong> √† <em>champs nomm√©s</em>  et de pouvoir acc√©der √† la valeur d‚Äôun champ par son nom. C‚Äôest le  dernier <strong>type construit</strong> de donn√©es que nous allons √©tudier.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">p_uplet_nomme</span> <span class="o">=</span> <span class="n">tab_dico_airports</span><span class="p">[</span><span class="mi">32478</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">p_uplet_nomme</span>
<span class="p">{</span><span class="s">'nom'</span><span class="p">:</span> <span class="s">'Lyon Saint-Exup√©ry Airport'</span><span class="p">,</span> <span class="s">'latitude'</span><span class="p">:</span> <span class="s">'45.725556'</span><span class="p">,</span> <span class="s">'longitude'</span><span class="p">:</span> <span class="s">'5.081111'</span><span class="p">,</span> <span class="s">'altitude'</span><span class="p">:</span> <span class="s">'821'</span><span class="p">,</span> <span class="s">'code_pays'</span><span class="p">:</span> <span class="s">'FR'</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">p_uplet_nomme</span><span class="p">[</span><span class="s">'latitude'</span><span class="p">]</span>
<span class="s">'45.725556'</span>
</code></pre></div></div>
<p>:::</p>

<p>:::definition
Un <strong>p-uplet nomm√©</strong> (ou <strong>tuple nomm√©</strong>) est un <strong>p-uplet</strong> dont chaque <strong>√©l√©ment</strong> (ou <strong>champ</strong>) est rep√©r√©e par un nom et non pas par un entier. Ces <strong>noms</strong> sont appel√©s <strong>clefs</strong> ou <strong>descripteurs</strong> du <strong>p-uplet</strong>, qui s‚Äô√©crit entre accolades  avec une virgule s√©parant chaque paire  constitu√© de la clef et de la valeur de la composante s√©par√©es par le symbole <code class="language-plaintext highlighter-rouge">:</code>.</p>

<p>En <a href="https://docs.python.org/3/tutorial/datastructures.html">Python</a>, les <strong>p-uplets nomm√©s</strong>  sont impl√©ment√©s par les <strong>dictionnaires</strong> de type <code class="language-plaintext highlighter-rouge">dict</code>. Par la suite nous parlerons de <strong>dictionnaire</strong> plut√¥t que de <strong>p-uplet nomm√©</strong>.</p>

<p>Comme l‚Äôacc√®s aux valeurs s‚Äôeffectue par les noms/clefs, comme dans un dictionnaire  o√π chaque nom est associ√© √† sa d√©finition, on parle aussi de <strong>tableaux associatifs</strong>.</p>

<p>Un dictionnaire n‚Äôest pas une s√©quence ordonn√©e d‚Äô√©l√©ments, l‚Äôacc√®s s‚Äôeffectue uniquement par clef.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">python</span> <span class="o">=</span> <span class="p">{</span><span class="s">'apparition'</span> <span class="p">:</span> <span class="mi">1993</span><span class="p">,</span> <span class="s">'version'</span> <span class="p">:</span> <span class="s">'3.8'</span><span class="p">,</span> <span class="s">'createur'</span> <span class="p">:</span> <span class="s">'Guido Van Rossum'</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">python</span><span class="p">[</span><span class="s">'createur'</span><span class="p">]</span>
<span class="s">'Guido Van Rossum'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">python</span><span class="p">)</span>
<span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">python</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="s">"&lt;stdin&gt;"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="nb">KeyError</span><span class="p">:</span> <span class="mi">2</span>
</code></pre></div></div>
<p>:::</p>

<h1 id="un-exemple--de-dictionnaire--les-metadonn√©es-exif-dune-photo-num√©rique">Un exemple  de dictionnaire : les metadonn√©es EXIF d‚Äôune photo num√©rique</h1>

<p>Les photos prises avec un appareil num√©rique contiennent de nombreuses informations. Dans le fichier image, par exemple au format <code class="language-plaintext highlighter-rouge">jpeg</code>, sont stock√©es des donn√©es non seulement sur l‚Äôimage elle-m√™me mais aussi sur l‚Äôappareil, le logiciel utilis√©, et en particulier des donn√©es <a href="https://fr.wikipedia.org/wiki/Exchangeable_image_file_format">EXIF</a> (Exchangeable Image File Format). Une partie est accessible dans les propri√©t√©s de fichier ou avec un logiciel de traitement d‚Äôimages.
Les sp√©cifications sont g√©r√©es par un organisme japonais, le JEITA, qui d√©finit diff√©rents dictionnaires de r√©f√©rence permettant d‚Äôacc√©der √† ces donn√©es. Les cl√©s (les tags) et les valeurs sont des nombres √©crits dans l‚Äôent√™te du fichier. Les dictionnaires donnent l‚Äôinterpr√©tation de ces cl√©s. Par exemple la cl√© 256 a pour valeur ‚ÄòWidth‚Äô , la largeur de l‚Äôimage en pixel, la cl√© 257 a pour
valeur ‚ÄòLength‚Äô , la hauteur de l‚Äôimage en pixel.</p>

<p><img src="images/exif.png" alt="donn√©es exif" />{width=50%}\</p>

<p><em>Source : <a href="https://commons.wikimedia.org/wiki/File:DigiKam_EXIF_information_screenshot.png">https://commons.wikimedia.org/wiki/File:DigiKam_EXIF_information_screenshot.png</a></em></p>

<p>:::exercice
On peut extraite les donn√©es EXIF avec le logiciel <a href="https://exiftool.org/">exiftool</a> ou sous forme de dictionnaire <a href="https://docs.python.org/3/tutorial/datastructures.html">Python</a> avec le module  <a href="https://smarnach.githeub.io/pyexiftool/">pyexiftool</a>.
La fonction ci-dessous permet par exemple d‚Äôextraire les donn√©es <a href="https://fr.wikipedia.org/wiki/Exchangeable_image_file_format">EXIF</a> d‚Äôun fichier image sous forme de dictionnaire.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">exiftool</span>

<span class="k">def</span> <span class="nf">extraire_exif</span><span class="p">(</span><span class="n">fichier</span><span class="p">):</span>
    <span class="n">et</span> <span class="o">=</span> <span class="n">exiftool</span><span class="p">.</span><span class="n">ExifTool</span><span class="p">()</span>
    <span class="n">et</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
    <span class="n">metadata</span> <span class="o">=</span> <span class="n">et</span><span class="p">.</span><span class="n">get_metadata</span><span class="p">(</span><span class="n">fichier</span><span class="p">)</span>
    <span class="n">et</span><span class="p">.</span><span class="n">terminate</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">metadata</span>
</code></pre></div></div>

<ol>
  <li>T√©l√©charger la photo <a href="http://frederic-junier.org/SNT/images/20181230_162625.jpg">http://frederic-junier.org/SNT/images/20181230_162625.jpg</a>.</li>
  <li>Extraire ses donn√©es <a href="https://fr.wikipedia.org/wiki/Exchangeable_image_file_format">EXIF</a> avec <a href="https://exiftool.org/">exiftool</a> ou le script <a href="https://docs.python.org/3/tutorial/datastructures.html">Python</a>, puis retrouver la commune o√π elle  a √©t√© prise. Voici une partie du dictionnaire obtenu :
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">metadata</span> <span class="o">=</span> <span class="n">extraire_exif</span><span class="p">(</span><span class="s">'20181230_162625.jpg'</span><span class="p">)</span>
<span class="p">{...,</span> <span class="s">'EXIF:Make'</span><span class="p">:</span> <span class="s">'samsung'</span><span class="p">,</span> <span class="s">'EXIF:Model'</span><span class="p">:</span> <span class="s">'SM-G930F'</span><span class="p">,</span> <span class="s">'EXIF:Orientation'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'EXIF:XResolution'</span><span class="p">:</span> <span class="mi">72</span><span class="p">,</span>
 <span class="s">'EXIF:YResolution'</span><span class="p">:</span> <span class="mi">72</span><span class="p">,</span> <span class="s">'EXIF:ResolutionUnit'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">'EXIF:Software'</span><span class="p">:</span> <span class="s">'G930FXXU3ERL3'</span><span class="p">,</span> <span class="s">'EXIF:ModifyDate'</span><span class="p">:</span> <span class="s">'2018:12:30 16:26:24'</span><span class="p">,</span> <span class="s">'EXIF:YCbCrPositioning'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'EXIF:ExposureTime'</span><span class="p">:</span> <span class="mf">0.0005733944954</span><span class="p">,</span> <span class="s">'EXIF:FNumber'</span><span class="p">:</span> <span class="mf">1.7</span><span class="p">,</span> <span class="s">'EXIF:ExposureProgram'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">'EXIF:ISO'</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span>
 <span class="s">'EXIF:ExifVersion'</span><span class="p">:</span> <span class="s">'0220'</span><span class="p">,</span> <span class="s">'EXIF:DateTimeOriginal'</span><span class="p">:</span> <span class="s">'2018:12:30 16:26:24'</span><span class="p">,</span> <span class="s">'EXIF:CreateDate'</span><span class="p">:</span> <span class="s">'2018:12:30 16:26:24'</span><span class="p">,</span> <span class="s">'EXIF:ComponentsConfiguration'</span><span class="p">:</span> <span class="s">'1 2 3 0'</span><span class="p">,</span> <span class="s">'EXIF:ShutterSpeedValue'</span><span class="p">:</span> <span class="s">'0.000572673315054629'</span><span class="p">,</span> <span class="s">'EXIF:ApertureValue'</span><span class="p">:</span> <span class="mf">1.6993699982773</span><span class="p">,</span> <span class="s">'EXIF:BrightnessValue'</span><span class="p">:</span> <span class="mf">8.36</span><span class="p">,</span>
 <span class="s">'EXIF:ExposureCompensation'</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s">'EXIF:MaxApertureValue'</span><span class="p">:</span> <span class="mf">1.6993699982773</span><span class="p">,</span> <span class="s">'EXIF:MeteringMode'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
 <span class="s">'EXIF:Flash'</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s">'EXIF:FocalLength'</span><span class="p">:</span> <span class="mf">4.2</span><span class="p">,</span> <span class="s">'EXIF:UserComment'</span><span class="p">:</span> <span class="s">''</span><span class="p">,</span> <span class="s">'EXIF:SubSecTime'</span><span class="p">:</span> <span class="s">'0999'</span><span class="p">,</span>
 <span class="p">....,</span> <span class="s">'EXIF:FlashpixVersion'</span><span class="p">:</span> <span class="s">'0100'</span><span class="p">,</span> <span class="s">'EXIF:ColorSpace'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'EXIF:ExifImageWidth'</span><span class="p">:</span> <span class="mi">4032</span><span class="p">,</span> <span class="s">'EXIF:ExifImageHeight'</span><span class="p">:</span> <span class="mi">3024</span><span class="p">,</span> <span class="p">...,</span> <span class="s">'EXIF:GPSVersionID'</span><span class="p">:</span> <span class="s">'2 2 0 0'</span><span class="p">,</span> <span class="s">'EXIF:GPSLatitudeRef'</span><span class="p">:</span> <span class="s">'N'</span><span class="p">,</span>
 <span class="s">'EXIF:GPSLatitude'</span><span class="p">:</span> <span class="mf">42.4947222222222</span><span class="p">,</span> <span class="s">'EXIF:GPSLongitudeRef'</span><span class="p">:</span> <span class="s">'E'</span><span class="p">,</span> <span class="s">'EXIF:GPSLongitude'</span><span class="p">:</span> <span class="mf">3.13</span><span class="p">,</span>
 <span class="s">'EXIF:GPSAltitudeRef'</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s">'EXIF:GPSAltitude'</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span> <span class="s">'EXIF:GPSTimeStamp'</span><span class="p">:</span> <span class="s">'15:26:35'</span><span class="p">,</span><span class="s">'EXIF:GPSDateStamp'</span><span class="p">:</span> <span class="s">'2018:12:30'</span><span class="p">,</span> <span class="p">....</span>
 <span class="p">}</span>
</code></pre></div>    </div>
    <p>:::</p>
  </li>
</ol>

<h1 id="cr√©ation-de-dictionnaire">Cr√©ation de dictionnaire</h1>

<p>:::methode
Il existe plusieurs fa√ßons de construire un dictionnaire :</p>

<ul>
  <li><strong>Par extension :</strong>  On peut utiliser la forme litt√©rale avec les accolades <code class="language-plaintext highlighter-rouge">{</code>  et <code class="language-plaintext highlighter-rouge">}</code> qui entourent la s√©rie des paires <code class="language-plaintext highlighter-rouge">clef : valeur</code> ou le constructeur <code class="language-plaintext highlighter-rouge">dict</code> qui peut convertir en dictionnaire une  s√©quence de <code class="language-plaintext highlighter-rouge">tuple</code> de la forme <code class="language-plaintext highlighter-rouge">(clef, valeur)</code>.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">processeur1</span> <span class="o">=</span> <span class="p">{</span><span class="s">'annee'</span> <span class="p">:</span> <span class="mi">1974</span><span class="p">,</span> <span class="s">'fabricant'</span> <span class="p">:</span> <span class="s">'Intel'</span><span class="p">,</span> <span class="s">'Frequence'</span> <span class="p">:</span> <span class="s">'2 MHz'</span><span class="p">,</span><span class="s">'gravure'</span> <span class="p">:</span> <span class="s">'6000 nm'</span><span class="p">,</span> <span class="s">'architecture'</span> <span class="p">:</span> <span class="s">'8080'</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">processeur2</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">([(</span><span class="s">'annee'</span><span class="p">,</span> <span class="mi">1978</span><span class="p">),</span> <span class="p">(</span><span class="s">'fabricant'</span><span class="p">,</span> <span class="s">'Intel'</span><span class="p">),(</span><span class="s">'Frequence'</span><span class="p">,</span><span class="s">'5 MHz'</span><span class="p">),(</span><span class="s">'gravure'</span><span class="p">,</span><span class="s">'3 micrometres'</span><span class="p">),(</span><span class="s">'architecture'</span><span class="p">,</span><span class="s">'8086'</span><span class="p">)])</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">processeur2</span>
<span class="p">{</span><span class="s">'annee'</span><span class="p">:</span> <span class="mi">1978</span><span class="p">,</span> <span class="s">'fabricant'</span><span class="p">:</span> <span class="s">'Intel'</span><span class="p">,</span> <span class="s">'Frequence'</span><span class="p">:</span> <span class="s">'5 MHz'</span><span class="p">,</span> <span class="s">'gravure'</span><span class="p">:</span> <span class="s">'3000 nm'</span><span class="p">,</span> <span class="s">'architecture'</span><span class="p">:</span> <span class="s">'8086'</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">processeur1</span><span class="p">[</span><span class="s">'gravure'</span><span class="p">]</span>
<span class="s">'6000 nm'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">processeur2</span><span class="p">[</span><span class="s">'gravure'</span><span class="p">]</span>
<span class="s">'3000 nm'</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Par compr√©hension :</strong> La  syntaxe est la m√™me que pour les tableaux de type <code class="language-plaintext highlighter-rouge">list</code> en rempla√ßant les parenth√®ses par des accolades. On peut r√©cup√©rer les paires <code class="language-plaintext highlighter-rouge">clef : valeur</code> en parcourant un tableau de <code class="language-plaintext highlighter-rouge">tuple</code>.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">tab_tuple</span> <span class="o">=</span> <span class="p">[(</span><span class="s">'annee'</span><span class="p">,</span> <span class="mi">1989</span><span class="p">),</span> <span class="p">(</span><span class="s">'fabricant'</span><span class="p">,</span> <span class="s">'Intel'</span><span class="p">),(</span><span class="s">'Frequence'</span><span class="p">,</span><span class="s">'25 MHz'</span><span class="p">),(</span><span class="s">'gravure'</span><span class="p">,</span><span class="s">'600 nm'</span><span class="p">),(</span><span class="s">'architecture'</span><span class="p">,</span><span class="s">'80486'</span><span class="p">)]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">processeur3</span> <span class="o">=</span> <span class="p">{</span> <span class="n">clef</span> <span class="p">:</span> <span class="n">valeur</span> <span class="k">for</span> <span class="n">clef</span><span class="p">,</span> <span class="n">valeur</span> <span class="ow">in</span> <span class="n">tab_tuple</span> <span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">processeur3</span>
<span class="p">{</span><span class="s">'annee'</span><span class="p">:</span> <span class="mi">1989</span><span class="p">,</span> <span class="s">'fabricant'</span><span class="p">:</span> <span class="s">'Intel'</span><span class="p">,</span> <span class="s">'Frequence'</span><span class="p">:</span> <span class="s">'25 MHz'</span><span class="p">,</span> <span class="s">'gravure'</span><span class="p">:</span> <span class="s">'600 nm'</span><span class="p">,</span> <span class="s">'architecture'</span><span class="p">:</span> <span class="s">'80486'</span><span class="p">}</span>
</code></pre></div>    </div>
    <p>:::</p>
  </li>
</ul>

<p>:::exercice
La fonction <code class="language-plaintext highlighter-rouge">ord</code> associe √† un caract√®re son point de code <a href="https://fr.wikipedia.org/wiki/Unicode">Unicode</a> et sa r√©ciproque est la fonction <code class="language-plaintext highlighter-rouge">chr</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nb">ord</span><span class="p">(</span><span class="s">'a'</span><span class="p">),</span> <span class="nb">chr</span><span class="p">(</span><span class="mi">97</span><span class="p">)</span>
<span class="p">(</span><span class="mi">97</span><span class="p">,</span> <span class="s">'a'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">[</span><span class="nb">chr</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">97</span><span class="p">,</span> <span class="mi">97</span> <span class="o">+</span> <span class="mi">10</span><span class="p">)]</span>
<span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">,</span> <span class="s">'e'</span><span class="p">,</span> <span class="s">'f'</span><span class="p">,</span> <span class="s">'g'</span><span class="p">,</span> <span class="s">'h'</span><span class="p">,</span> <span class="s">'i'</span><span class="p">,</span> <span class="s">'j'</span><span class="p">]</span>
</code></pre></div></div>

<p>Donner des expressions qui permettent de d√©finir les dictionnaires ci-dessous par compr√©hension :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">ordinal</span>
<span class="p">{</span><span class="s">'a'</span><span class="p">:</span> <span class="mi">97</span><span class="p">,</span> <span class="s">'b'</span><span class="p">:</span> <span class="mi">98</span><span class="p">,</span> <span class="s">'c'</span><span class="p">:</span> <span class="mi">99</span><span class="p">,</span> <span class="s">'d'</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="s">'e'</span><span class="p">:</span> <span class="mi">101</span><span class="p">,</span> <span class="s">'f'</span><span class="p">:</span> <span class="mi">102</span><span class="p">,</span> <span class="s">'g'</span><span class="p">:</span> <span class="mi">103</span><span class="p">,</span> <span class="s">'h'</span><span class="p">:</span> <span class="mi">104</span><span class="p">,</span> <span class="s">'i'</span><span class="p">:</span> <span class="mi">105</span><span class="p">,</span> <span class="s">'j'</span><span class="p">:</span> <span class="mi">106</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">caractere</span>
<span class="p">{</span><span class="mi">97</span><span class="p">:</span> <span class="s">'a'</span><span class="p">,</span> <span class="mi">98</span><span class="p">:</span> <span class="s">'b'</span><span class="p">,</span> <span class="mi">99</span><span class="p">:</span> <span class="s">'c'</span><span class="p">,</span> <span class="mi">100</span><span class="p">:</span> <span class="s">'d'</span><span class="p">,</span> <span class="mi">101</span><span class="p">:</span> <span class="s">'e'</span><span class="p">,</span> <span class="mi">102</span><span class="p">:</span> <span class="s">'f'</span><span class="p">,</span> <span class="mi">103</span><span class="p">:</span> <span class="s">'g'</span><span class="p">,</span> <span class="mi">104</span><span class="p">:</span> <span class="s">'h'</span><span class="p">,</span> <span class="mi">105</span><span class="p">:</span> <span class="s">'i'</span><span class="p">,</span> <span class="mi">106</span><span class="p">:</span> <span class="s">'j'</span><span class="p">}</span>
</code></pre></div></div>

<p>:::</p>

<h1 id="acc√®s-ajout-suppression-d√©l√©ment-dans-un-dictionnaire">Acc√®s, ajout, suppression d‚Äô√©l√©ment dans un dictionnaire</h1>

<p>:::methode</p>

<ul>
  <li>L‚Äôacc√®s, la modification, l‚Äôajout d‚Äôun √©l√©ment se fait avec l‚Äôop√©rateur crochet :  <code class="language-plaintext highlighter-rouge">dico[clef]</code> retourne la valeur appair√©e avec la clef donn√©e dans le dictionnaire <code class="language-plaintext highlighter-rouge">dico</code>. 
Le nombre d‚Äô√©l√©ments est donn√© par la fonction <code class="language-plaintext highlighter-rouge">len</code>, mais les √©l√©ments sont index√©s par les clefs et non par des entiers : <em>il n‚Äôy a pas de notion d‚Äôordre dans un dictionnaire.</em>
Comme les tableaux de type <code class="language-plaintext highlighter-rouge">list</code> et contrairement aux <strong>p-uplets</strong>  de type <code class="language-plaintext highlighter-rouge">tuple</code>, les dictionnaires de type <code class="language-plaintext highlighter-rouge">dict</code> sont  modifiables apr√®s modification , on dit qu‚Äôils sont <strong>mutables</strong>.  Un dictionnaire peut √™tre construit par ajout successif de paires <code class="language-plaintext highlighter-rouge">clef : valeur</code> √† partir du dictionnaire vide <code class="language-plaintext highlighter-rouge">{}</code>. Enfin, on peut supprimer un √©l√©ment si on conna√Æt sa <code class="language-plaintext highlighter-rouge">clef</code> avec <code class="language-plaintext highlighter-rouge">del dico[clef]</code>.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">nobel2019</span> <span class="o">=</span> <span class="p">{}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">nobel2019</span><span class="p">[</span><span class="s">'Litt√©rature'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'Peter Handke'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">nobel2019</span>
<span class="p">{</span><span class="s">'Litt√©rature'</span><span class="p">:</span> <span class="s">'Peter Handke'</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">nobel2019</span><span class="p">[</span><span class="s">'Paix'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'Kim Joon Hyun'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">nobel2019</span>
<span class="p">{</span><span class="s">'Litt√©rature'</span><span class="p">:</span> <span class="s">'Peter Handke'</span><span class="p">,</span> <span class="s">'Paix'</span><span class="p">:</span> <span class="s">'Kim Joon Hyun'</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">nobel2019</span><span class="p">[</span><span class="s">'Paix'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'Abiy Ahmed'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">nobel2019</span>
<span class="p">{</span><span class="s">'Litt√©rature'</span><span class="p">:</span> <span class="s">'Peter Handke'</span><span class="p">,</span> <span class="s">'Paix'</span><span class="p">:</span> <span class="s">'Abiy Ahmed'</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">nobel2019</span><span class="p">[</span><span class="s">'Maths'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'C√©dric Villani'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">nobel2019</span>
<span class="p">{</span><span class="s">'Litt√©rature'</span><span class="p">:</span> <span class="s">'Peter Handke'</span><span class="p">,</span> <span class="s">'Paix'</span><span class="p">:</span> <span class="s">'Abiy Ahmed'</span><span class="p">,</span> <span class="s">'Maths'</span><span class="p">:</span> <span class="s">'C√©dric Villani'</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">del</span> <span class="n">nobel2019</span><span class="p">[</span><span class="s">'Maths'</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">nobel2019</span>
<span class="p">{</span><span class="s">'Litt√©rature'</span><span class="p">:</span> <span class="s">'Peter Handke'</span><span class="p">,</span> <span class="s">'Paix'</span><span class="p">:</span> <span class="s">'Abiy Ahmed'</span><span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Parce qu‚Äôun dictionnaire est impl√©ment√© par une <a href="https://fr.wikipedia.org/wiki/Table_de_hachage">table de hachage</a>, ses <strong>clefs</strong>  doivent,   n√©cessairement √™tre <strong>immutables</strong> (plus pr√©cis√©ment r√©cursivement immutables s‚Äôil s‚Äôagit de structures imbriqu√©es et encore plus pr√©cis√©ment <a href="https://docs.python.org/3/glossary.html">hachables</a>).  Une valeur est <strong>immutable</strong> si elle  ne peut pas √™tre modifi√©e apr√®s sa cr√©ation. 
Les types de base <code class="language-plaintext highlighter-rouge">int</code>, <code class="language-plaintext highlighter-rouge">float</code>,  <code class="language-plaintext highlighter-rouge">bool</code> et les types construits <code class="language-plaintext highlighter-rouge">tuple</code>, <code class="language-plaintext highlighter-rouge">str</code> sont <strong>immutables</strong> mais pas les types <code class="language-plaintext highlighter-rouge">list</code> et <code class="language-plaintext highlighter-rouge">dict</code> (un dictionnaire ne peut pas √™tre une clef de dictionnaire).</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">jouet</span> <span class="o">=</span><span class="nb">dict</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">jouet</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="s">'clef de type int'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">jouet</span><span class="p">[</span><span class="bp">True</span><span class="p">]</span> <span class="o">=</span> <span class="s">'clef de type bool'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">jouet</span><span class="p">[(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)]</span> <span class="o">=</span> <span class="s">'clef de type tuple'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">jouet</span>
<span class="p">{</span><span class="mi">2</span><span class="p">:</span> <span class="s">'clef de type int'</span><span class="p">,</span> <span class="bp">True</span><span class="p">:</span> <span class="s">'clef de type bool'</span><span class="p">,</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">):</span> <span class="s">'clef de type tuple'</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">jouet</span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]]</span> <span class="o">=</span> <span class="s">'clef de type list -&gt; impossible'</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="s">"&lt;stdin&gt;"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="nb">TypeError</span><span class="p">:</span> <span class="n">unhashable</span> <span class="nb">type</span><span class="p">:</span> <span class="s">'list'</span>
</code></pre></div></div>

<ul>
  <li>Une dictionnaire ne peut pas √™tre une clef, mais peut √™tre une valeur dans un autre dictionnaire. On peut d√©finir toutes sortes de  structures imbriqu√©es comme des tableaux de dictionnaires ‚Ä¶</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">vols</span> <span class="o">=</span> <span class="p">{</span><span class="s">'Lisbonne'</span><span class="p">:</span> <span class="p">{</span><span class="s">'heure'</span><span class="p">:</span> <span class="s">'21:10'</span><span class="p">,</span><span class="s">'num'</span><span class="p">:</span> <span class="s">'EJU7674'</span><span class="p">,</span><span class="s">'compagnie'</span><span class="p">:</span> <span class="s">'EASYJET'</span><span class="p">},</span>
<span class="p">...</span> <span class="s">'Vienne'</span><span class="p">:</span> <span class="p">{</span><span class="s">'heure'</span><span class="p">:</span> <span class="s">'21:25'</span><span class="p">,</span><span class="s">'num'</span><span class="p">:</span> <span class="s">'OS430'</span><span class="p">,</span><span class="s">'compagnie'</span><span class="p">:</span> <span class="s">'AUSTRIAN AIRLINES'</span><span class="p">},</span>
<span class="p">...</span> <span class="s">'Londres'</span><span class="p">:</span> <span class="p">{</span><span class="s">'heure'</span><span class="p">:</span> <span class="s">'21:55'</span><span class="p">,</span><span class="s">'num'</span><span class="p">:</span> <span class="s">'BA357'</span><span class="p">,</span><span class="s">'compagnie'</span><span class="p">:</span> <span class="s">'BRITISH AIRWAYS'</span><span class="p">}}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vols</span><span class="p">[</span><span class="s">'Londres'</span><span class="p">]</span>
<span class="p">{</span><span class="s">'heure'</span><span class="p">:</span> <span class="s">'21:55'</span><span class="p">,</span> <span class="s">'num'</span><span class="p">:</span> <span class="s">'BA357'</span><span class="p">,</span> <span class="s">'compagnie'</span><span class="p">:</span> <span class="s">'BRITISH AIRWAYS'</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">tab_dico_airports</span>
<span class="p">[{</span><span class="s">'nom'</span><span class="p">:</span> <span class="s">'Total Rf Heliport'</span><span class="p">,</span><span class="s">'latitude'</span><span class="p">:</span> <span class="s">'40.07080078125'</span><span class="p">,</span> <span class="s">'longitude'</span><span class="p">:</span> <span class="s">'-74.93360137939453'</span><span class="p">,</span>
  <span class="s">'altitude'</span><span class="p">:</span> <span class="s">'11'</span><span class="p">,</span>  <span class="s">'code_pays'</span><span class="p">:</span> <span class="s">'US'</span><span class="p">},</span>
   <span class="p">{</span><span class="s">'nom'</span><span class="p">:</span> <span class="s">'Aero B Ranch Airport'</span><span class="p">,</span>  <span class="s">'latitude'</span><span class="p">:</span> <span class="s">'38.704022'</span><span class="p">,</span>  <span class="s">'longitude'</span><span class="p">:</span> <span class="s">'-101.473911'</span><span class="p">,</span>
  <span class="s">'altitude'</span><span class="p">:</span> <span class="s">'3435'</span><span class="p">,</span>  <span class="s">'code_pays'</span><span class="p">:</span> <span class="s">'US'</span><span class="p">}]</span>
</code></pre></div></div>

<ul>
  <li>Avec l‚Äôop√©rateur crochet, si une clef n‚Äôappartient √† un dictionnaire, une exception (erreur en <a href="https://docs.python.org/3/tutorial/datastructures.html">Python</a>) est lev√©e.  La m√©thode <code class="language-plaintext highlighter-rouge">get</code> permet de retourner la valeur <code class="language-plaintext highlighter-rouge">None</code> par d√©faut si on ne veut pas d‚Äôerreur.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">prix_turing2006</span> <span class="o">=</span> <span class="p">{</span><span class="s">'nom'</span> <span class="p">:</span> <span class="s">'Frances Allen'</span><span class="p">,</span> <span class="s">'sujet'</span> <span class="p">:</span> <span class="s">'Optimisation des compilateurs'</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">prix_turing2006</span><span class="p">[</span><span class="s">'pays'</span><span class="p">]</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="s">"&lt;stdin&gt;"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="nb">KeyError</span><span class="p">:</span> <span class="s">'pays'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">prix_turing2006</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'pays'</span><span class="p">)</span>
</code></pre></div></div>
<p>:::</p>

<p>:::exercice</p>

<p><em>QCM de type E3C 2</em>.</p>

<ol>
  <li><strong>Question 1</strong> Comment peut-on acc√©der √† la valeur associ√©e √† une cl√© dans un
dictionnaire ?</li>
</ol>

<p><strong><em>R√©ponses</em></strong></p>

<p><strong>A)</strong> il faut parcourir le dictionnaire avec une boucle √† la recherche de la
cl√©</p>

<p><strong>B)</strong> on peut y acc√©der directement √† partir de la cl√©</p>

<p><strong>C)</strong> on ne peut pas acc√©der √† une valeur contenue dans un dictionnaire √†
partir d‚Äôune cl√©</p>

<p><strong>D)</strong> il faut d‚Äôabord d√©chiffrer la cl√© pour acc√©der √† un dictionnaire</p>

<ol>
  <li><strong>Question 2</strong>  On a d√©fini un dictionnaire :</li>
</ol>

<p>contacts = {'Paul': '0601010182', 'Jacques': '0602413824',
'Claire': '0632451153'}</p>

<p>Quelle instruction √©crire pour ajouter √† ce dictionnaire un nouveau
contact nomm√© Juliette avec le num√©ro de t√©l√©phone 0603040506 ?</p>

<p><strong>R√©ponses</strong></p>

<p><strong>A)</strong> 'Juliette': '0603040506'</p>

<p><strong>B)</strong> contacts.append('Juliette': '0603040506')</p>

<p><strong>C)</strong> contacts['Juliette'] = '0603040506'</p>

<p><strong>D)</strong>  contacts.append('Juliette', '0603040506')</p>

<ol>
  <li><strong>Question 3</strong> Consid√©rons le dictionnaire suivant :</li>
</ol>

<p>resultats = {'Paul':5 , 'Amina':1 , 'L√©on' : 9 , 'Benoit':3}</p>

<p>Quelle affirmation est correcte ?</p>

<p><strong>R√©ponses</strong></p>

<p><strong>A)</strong> resultats['Amina'] vaut 1</p>

<p><strong>B)</strong> resultats[1] vaut 'Amina'</p>

<p><strong>C)</strong> 'Paul' est une valeur de ce dictionnaire</p>

<p><strong>D)</strong> 9 est une cl√© de ce dictionnaire</p>

<ol>
  <li><strong>Question 4</strong> Pour g√©rer certaines donn√©es EXIF de photographies, on a utilis√© le code
suivant pour stocker dans une liste L de dictionnaires quelques
donn√©es¬†:</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">L</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">L</span><span class="p">.</span><span class="n">append</span><span class="p">({</span><span class="s">'marque'</span><span class="p">:</span> <span class="s">'Canon'</span><span class="p">,</span> <span class="s">'modele'</span><span class="p">:</span> <span class="s">'EOS 7D'</span><span class="p">,</span> <span class="s">'focale'</span><span class="p">:</span>
<span class="s">'19mm'</span><span class="p">,</span> <span class="s">'flash'</span><span class="p">:</span> <span class="bp">False</span><span class="p">})</span>
<span class="n">L</span><span class="p">.</span><span class="n">append</span><span class="p">({</span><span class="s">'marque'</span><span class="p">:</span> <span class="s">'Nikon'</span><span class="p">,</span> <span class="s">'modele'</span><span class="p">:</span> <span class="s">'CoolPix A1000'</span><span class="p">,</span>
<span class="s">'focale'</span><span class="p">:</span> <span class="s">'19mm'</span><span class="p">,</span> <span class="s">'flash'</span><span class="p">:</span> <span class="bp">True</span><span class="p">})</span>
<span class="n">L</span><span class="p">.</span><span class="n">append</span><span class="p">({</span><span class="s">'marque'</span><span class="p">:</span> <span class="s">'Sony'</span><span class="p">,</span> <span class="s">'modele'</span><span class="p">:</span> <span class="s">'HK 350'</span><span class="p">,</span> <span class="s">'focale'</span><span class="p">:</span>
<span class="s">'24mm'</span><span class="p">,</span> <span class="s">'flash'</span><span class="p">:</span> <span class="bp">False</span><span class="p">})</span>
<span class="n">L</span><span class="p">.</span><span class="n">append</span><span class="p">({</span><span class="s">'marque'</span><span class="p">:</span> <span class="s">'Sony'</span><span class="p">,</span> <span class="s">'modele'</span><span class="p">:</span> <span class="s">'HK 350'</span><span class="p">,</span> <span class="s">'focale'</span><span class="p">:</span>
<span class="s">'19mm'</span><span class="p">,</span> <span class="s">'flash'</span><span class="p">:</span> <span class="bp">True</span><span class="p">})</span>
</code></pre></div></div>
<p>‚Ä¶‚Ä¶  et ainsi de suite, d'autres informations ont √©t√© ajout√©es  ‚Ä¶‚Ä¶</p>

<p>On veut extraire de ces informations la liste Z des photographies
obtenues avec un Canon ou un Nikon et une distance focale de 19 mm.</p>

<p>Quelle instruction permet de r√©aliser cette extraction ?</p>

<p><strong><em>R√©ponses</em></strong></p>

<p><strong>A)</strong> Z = [ p for p in L if (p['marque'] == 'Canon' or
p['focale'] == '19mm')
and¬†(p['marque']¬†==¬†'Nikon'¬†or¬†p['focale'] == '19mm') ]</p>

<p><strong>B)</strong>  Z = [ p for p in L if (p['marque'] == 'Canon' and
p['focale'] == '19mm')
and¬†(p['marque']¬†==¬†'Nikon'
¬†and¬†p['focale'] == '19mm') ]</p>

<p><strong>C)</strong> Z = [ p for p in L if (p['marque'] == 'Canon' or
p['focale'] == '19mm')
or¬†(p['marque']¬†==¬†'Nikon'¬†or¬†p['focale'] == '19mm') ]</p>

<p><strong>D)</strong> Z = [ p for p in L if (p['marque'] == 'Canon' and
p['focale'] == '19mm')
or¬†(p['marque']¬†==¬†'Nikon'¬†and¬†</p>

<p>p['focale'] == '19mm') ]</p>

<ol>
  <li><strong>Question 5</strong> On d√©finit le dictionnaire d = {'a': 1, 'b': 2, 'c': 3, 'z':
26}. Quelle expression permet de r√©cup√©rer la valeur de la cl√© 'z' ?</li>
</ol>

<p><strong>R√©ponses</strong></p>

<p><strong>A)</strong> d[4]    <strong>B)</strong> d[26]    <strong>C)</strong> d[z]   <strong>D)</strong> d['z']</p>

<ol>
  <li><strong>Question 6</strong> On d√©finit ainsi une variable t :</li>
</ol>

<p>t = [ {'id':1, 'age':23, 'sejour':'PEKIN'},<br />
{'id':2, 'age':27, 'sejour':'ISTANBUL'},<br />
{'id':3, 'age':53, 'sejour':'LONDRES'},<br />
{'id':4, 'age':41, 'sejour':'ISTANBUL'},<br />
{'id':5, 'age':62, 'sejour':'RIO'},<br />
{'id':6, 'age':28, 'sejour':'ALGER'}]</p>

<p>Quelle affirmation est correcte ?</p>

<p><strong><em>R√©ponses</em></strong></p>

<p><strong>A)</strong> t est une liste de listes  <strong>B)</strong> t est une liste de dictionnaires</p>

<p><strong>C)</strong> t est un dictionnaire de listes   <strong>D)</strong> t est une liste de tuples
:::</p>

<h1 id="parcours-de-dictionnaire">Parcours de dictionnaire</h1>

<p>:::methode
Il existe trois fa√ßons de parcourir un dictionnaire. Dans les exemples, on utilisera un dictionnaire qui repr√©sente un annuaire :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">dico</span> <span class="o">=</span> <span class="p">{</span> <span class="s">'Paul'</span> <span class="p">:</span> <span class="s">'0640507080'</span><span class="p">,</span> <span class="s">'Marie'</span> <span class="p">:</span> <span class="s">'0742516483'</span><span class="p">,</span> <span class="s">'Hicham'</span> <span class="p">:</span> <span class="s">'0987416543'</span><span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p><strong>Parcours par clefs :</strong></p>

    <ul>
      <li>Comme pour les types <code class="language-plaintext highlighter-rouge">list</code>, <code class="language-plaintext highlighter-rouge">str</code> et <code class="language-plaintext highlighter-rouge">tuple</code>, les dictionnaires sont it√©rables avec la syntaxe <code class="language-plaintext highlighter-rouge">for clef in dico</code>  de type <code class="language-plaintext highlighter-rouge">list</code> ou <code class="language-plaintext highlighter-rouge">tuple</code>, mais on ne parcourt ainsi que les clefs. On peut aussi utiliser la m√©thode <code class="language-plaintext highlighter-rouge">keys</code>. <em>√Ä  partir des clefs on peut retrouver les  valeurs.</em></li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">clef</span> <span class="ow">in</span> <span class="n">dico</span><span class="p">:</span>
<span class="p">...</span>     <span class="k">print</span><span class="p">(</span><span class="s">"Clef -&gt; "</span><span class="p">,</span> <span class="n">clef</span><span class="p">)</span>
<span class="p">...</span> 
<span class="n">Clef</span> <span class="o">-&gt;</span>  <span class="n">Paul</span>
<span class="n">Clef</span> <span class="o">-&gt;</span>  <span class="n">Marie</span>
<span class="n">Clef</span> <span class="o">-&gt;</span>  <span class="n">Hicham</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">clef</span> <span class="ow">in</span> <span class="n">dico</span><span class="p">.</span><span class="n">keys</span><span class="p">():</span>
<span class="p">...</span>     <span class="k">print</span><span class="p">(</span><span class="s">"Clef -&gt;"</span><span class="p">,</span> <span class="n">clef</span><span class="p">,</span> <span class="s">" Valeur -&gt;"</span><span class="p">,</span> <span class="n">dico</span><span class="p">[</span><span class="n">clef</span><span class="p">])</span>
<span class="p">...</span> 
<span class="n">Clef</span> <span class="o">-&gt;</span> <span class="n">Paul</span>  <span class="n">Valeur</span> <span class="o">-&gt;</span> <span class="mi">0640507080</span>
<span class="n">Clef</span> <span class="o">-&gt;</span> <span class="n">Marie</span>  <span class="n">Valeur</span> <span class="o">-&gt;</span> <span class="mi">0742516483</span>
<span class="n">Clef</span> <span class="o">-&gt;</span> <span class="n">Hicham</span>  <span class="n">Valeur</span> <span class="o">-&gt;</span> <span class="mi">0987416543</span>
</code></pre></div></div>
<ul>
  <li><em>L‚Äôordre de parcours n‚Äôest pas forc√©ment l‚Äôordre d‚Äôinsertion car un dictionnaire n‚Äôest pas ordonn√©</em> Ainsi, on ne peut pas parcourir  un dictionnaire par index avec <code class="language-plaintext highlighter-rouge">for k in range(len(dico))</code>.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">dico</span><span class="p">)):</span>
<span class="p">...</span>     <span class="k">print</span><span class="p">(</span><span class="n">dico</span><span class="p">[</span><span class="n">k</span><span class="p">])</span>
<span class="p">...</span> 
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="s">"&lt;stdin&gt;"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">2</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
<span class="nb">KeyError</span><span class="p">:</span> <span class="mi">0</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Parcours par valeurs :</strong></li>
</ul>

<p>On peut parcourir un dictionnaire  par valeurs avec sa m√©thode <code class="language-plaintext highlighter-rouge">values</code>. <em>√Ä  partir des valeurs on ne peut cependant pas retrouver les clefs.</em></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">dico</span><span class="p">.</span><span class="n">values</span><span class="p">():</span>
<span class="p">...</span>     <span class="k">print</span><span class="p">(</span><span class="s">"Valeur -&gt; "</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
<span class="p">...</span> 
<span class="n">Valeur</span> <span class="o">-&gt;</span>  <span class="mi">0640507080</span>
<span class="n">Valeur</span> <span class="o">-&gt;</span>  <span class="mi">0742516483</span>
<span class="n">Valeur</span> <span class="o">-&gt;</span>  <span class="mi">0987416543</span>
</code></pre></div></div>

<ul>
  <li><strong>Parcours par paires (clef, valeur) :</strong></li>
</ul>

<p>On peut parcourir un dictionnaire  par  paires (clef, valeur) valeurs avec sa m√©thode <code class="language-plaintext highlighter-rouge">items</code>. On utilise le m√©canisme de <em>tuple unpacking</em> dans la boucle <code class="language-plaintext highlighter-rouge">for</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="p">(</span><span class="n">clef</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span> <span class="ow">in</span> <span class="n">dico</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
<span class="p">...</span>     <span class="k">print</span><span class="p">(</span><span class="s">"Clef -&gt;"</span><span class="p">,</span> <span class="n">clef</span><span class="p">,</span> <span class="s">" Valeur -&gt;"</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
<span class="p">...</span> 
<span class="n">Clef</span> <span class="o">-&gt;</span> <span class="n">Paul</span>  <span class="n">Valeur</span> <span class="o">-&gt;</span> <span class="mi">0640507080</span>
<span class="n">Clef</span> <span class="o">-&gt;</span> <span class="n">Marie</span>  <span class="n">Valeur</span> <span class="o">-&gt;</span> <span class="mi">0742516483</span>
<span class="n">Clef</span> <span class="o">-&gt;</span> <span class="n">Hicham</span>  <span class="n">Valeur</span> <span class="o">-&gt;</span> <span class="mi">0987416543</span>
</code></pre></div></div>

<p>:::</p>

<p>:::exercice</p>

<p>On consid√®re le dictionnaire :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dico</span> <span class="o">=</span> <span class="p">{</span><span class="s">"a"</span> <span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="s">"b"</span> <span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="s">"c"</span> <span class="p">:</span> <span class="bp">True</span><span class="p">}</span>
</code></pre></div></div>

<ol>
  <li>Quels sont les affichages possibles lors de l‚Äôex√©cution du code suivant ?</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">clef</span> <span class="ow">in</span> <span class="n">dico</span><span class="p">.</span><span class="n">keys</span><span class="p">()</span>
  <span class="k">print</span><span class="p">(</span><span class="n">clef</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">" "</span><span class="p">)</span>
</code></pre></div></div>

<p><strong><em>R√©ponses</em></strong></p>

<p><strong>A)</strong> <code class="language-plaintext highlighter-rouge">a b c</code> 
<strong>B)</strong>  <code class="language-plaintext highlighter-rouge">True False True</code> 
<strong>C)</strong>  <code class="language-plaintext highlighter-rouge">(a, True) (b, False)  (c, True)</code></p>

<ol>
  <li>Quels sont les affichages possibles lors de l‚Äôex√©cution du code suivant ?</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">var</span> <span class="ow">in</span> <span class="n">dico</span><span class="p">.</span><span class="n">items</span><span class="p">()</span>
  <span class="k">print</span><span class="p">(</span><span class="n">clef</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">" "</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>A)</strong> <code class="language-plaintext highlighter-rouge">a b c</code> 
<strong>B)</strong>  <code class="language-plaintext highlighter-rouge">True False True</code> 
<strong>C)</strong>  <code class="language-plaintext highlighter-rouge">(a, True) (b, False)  (c, True)</code>
:::</p>

<h1 id="r√©f√©rences-partag√©es-et-mutabilit√©">R√©f√©rences partag√©es et mutabilit√©</h1>

<p>:::methode
Une variable de type <code class="language-plaintext highlighter-rouge">dict</code> n‚Äôest qu‚Äôune r√©f√©rence, un <strong>alias</strong> vers la zone m√©moire o√π sont stock√©es les donn√©es. Comme pour les tableaux de type <code class="language-plaintext highlighter-rouge">list</code> il faut pr√™ter attention aux effets non ma√Ætris√©es des r√©f√©rences partag√©es.</p>

<ul>
  <li>Les  dictionnaires √©tant  des valeurs <strong>mutables</strong>, ils peuvent √™tre modifi√©s par <strong>effet de bord</strong> lorsqu‚Äôils sont transmis √† une fonction.</li>
  <li>Pour copier une structure imbriqu√©e avec des dictionnaires il faut r√©aliser une copie profonde avec la fonction <code class="language-plaintext highlighter-rouge">deepcopy</code> du module <code class="language-plaintext highlighter-rouge">copy</code>.</li>
</ul>

<p>On donne ci-dessous un programme et deux visualisations de son environnement : avant et apr√®s l‚Äôex√©cution de la derni√®re instruction.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">contact_ami</span> <span class="o">=</span> <span class="p">{</span> <span class="s">'Paul'</span> <span class="p">:</span> <span class="s">'0640507080'</span><span class="p">,</span> <span class="s">'Marie'</span> <span class="p">:</span> <span class="s">'0742516483'</span><span class="p">}</span>
<span class="n">contact_travail</span> <span class="o">=</span> <span class="p">{</span> <span class="s">'Adam'</span> <span class="p">:</span> <span class="s">'0666666666'</span><span class="p">,</span> <span class="s">'Eve'</span> <span class="p">:</span> <span class="s">'0777777777'</span><span class="p">}</span>
<span class="n">contact_tous</span> <span class="o">=</span> <span class="p">{</span><span class="s">'amis'</span> <span class="p">:</span> <span class="n">contact_ami</span><span class="p">,</span> <span class="s">'travail'</span> <span class="p">:</span> <span class="n">contact_travail</span><span class="p">}</span>
<span class="n">contact_copie</span> <span class="o">=</span> <span class="n">contact_tous</span>

<span class="k">def</span> <span class="nf">ajout</span><span class="p">(</span><span class="n">contact</span><span class="p">,</span> <span class="n">nom</span><span class="p">,</span> <span class="n">numero</span><span class="p">):</span>
    <span class="n">contact</span><span class="p">[</span><span class="n">nom</span><span class="p">]</span> <span class="o">=</span> <span class="n">numero</span>

<span class="n">ajout</span><span class="p">(</span><span class="n">contact_ami</span><span class="p">,</span> <span class="s">'Napoleon'</span><span class="p">,</span> <span class="s">'0618001814'</span><span class="p">)</span>
</code></pre></div></div>
<p>:::</p>

<p>:::{.minipage width=‚Äù0.5\linewidth‚Äù centre=‚Äùtrue‚Äù}
<img src="images/attention.png" alt="Attention 1" /><br />
&amp;
<img src="images/attention2.png" alt="Attention 2" /><br />
:::</p>

<h1 id="performance">Performance</h1>

<p>:::propriete
Les dictionnaires de type <code class="language-plaintext highlighter-rouge">dict</code> sont impl√©ment√©s en <a href="https://docs.python.org/3/tutorial/datastructures.html">Python</a> par des  <a href="https://fr.wikipedia.org/wiki/Table_de_hachage">tables de hachage</a> qui est une structure de donn√©es tr√®s efficace pour le test d‚Äôappartenance, la recherche ou l‚Äôinsertion d‚Äô√©l√©ment. On peut consid√©rer que ces op√©rations se font en temps quasiment constant, c‚Äôest-√†-dire ind√©pendant de la taille du dictionnaire alors que la recherche et le test d‚Äôappartenance s‚Äôeffectue en temps lin√©aire en moyenne (proportionnel √† la taille du tableau) pour les tableaux de type <code class="language-plaintext highlighter-rouge">list</code> ou les <code class="language-plaintext highlighter-rouge">tuple</code>. Cet optimisation des performances en temps se fait au d√©triment de l‚Äôoccupation en espace, les dictionnaires √©tant plus gourmands en m√©moire que les tableaux.</p>

<p>On donne ci-dessous un comparatif de temps d‚Äôex√©cutions pour la recherche de 1000 flottants d‚Äôun tableau <code class="language-plaintext highlighter-rouge">needle</code> (aiguilles) de taille 500, dans des tableaux de flottants <code class="language-plaintext highlighter-rouge">haystack</code> (meule de foin)  de  taille croissante $10^{k}$   avec $k \in {3,4,5,6,7}$.  Pour chaque test, les √©l√©ments de <code class="language-plaintext highlighter-rouge">haystack</code> et <code class="language-plaintext highlighter-rouge">needle</code>sont tous distincts et la moiti√© de <code class="language-plaintext highlighter-rouge">needle</code> est dans <code class="language-plaintext highlighter-rouge">haystack</code>.</p>

<p>Le code de cet exemple, tir√© de l‚Äôouvrage Python Fluent  de Luciano Ramalho, est disponible avec nos commentaires dans l‚Äôarchive <a href="https://gitlab.com/frederic-junier/nsi/-/blob/master/TypesConstruits/Dictionnaires/Cours/ressources/test_performance_in.zip">test_performance_in.zip</a>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Type de conteneur dict
--------------------
Taille de la meule de foin :     1000
Temps minimum de recherche de 1000 aiguilles  (sur 5 recherches): 0.000104s
--------------------
Taille de la meule de foin :    10000
Temps minimum de recherche de 1000 aiguilles  (sur 5 recherches): 0.000196s
--------------------
Taille de la meule de foin :   100000
Temps minimum de recherche de 1000 aiguilles  (sur 5 recherches): 0.000252s
--------------------
Taille de la meule de foin :  1000000
Temps minimum de recherche de 1000 aiguilles  (sur 5 recherches): 0.000399s
--------------------
Taille de la meule de foin : 10000000
Temps minimum de recherche de 1000 aiguilles  (sur 5 recherches): 0.000483s
--------------------

Type de conteneur list
--------------------
Taille de la meule de foin :     1000
Temps minimum de recherche de 1000 aiguilles  (sur 5 recherches): 0.008002s
--------------------
Taille de la meule de foin :    10000
Temps minimum de recherche de 1000 aiguilles  (sur 5 recherches): 0.078902s
--------------------
Taille de la meule de foin :   100000
Temps minimum de recherche de 1000 aiguilles  (sur 5 recherches): 0.812977s
--------------------
Taille de la meule de foin :  1000000
Temps minimum de recherche de 1000 aiguilles  (sur 5 recherches): 8.554425s
--------------------
Taille de la meule de foin : 10000000
Temps minimum de recherche de 1000 aiguilles (sur 5 recherches):84.754335s
--------------------
</code></pre></div></div>
<p>:::</p>

<h1 id="synth√®se">Synth√®se</h1>

<p>:::memo</p>
<ul>
  <li>Le type construit  <strong>p-uplet nomm√©</strong> est une s√©quence non ordonn√©e d‚Äô√©l√©ments qui sont des paires <code class="language-plaintext highlighter-rouge">(clef, valeur)</code> ou <code class="language-plaintext highlighter-rouge">clef : valeur</code>. Chaque <code class="language-plaintext highlighter-rouge">valeur</code> est index√©e  par sa <code class="language-plaintext highlighter-rouge">clef</code>  et non par un index entier comme dans <strong>p-uplet</strong>.</li>
  <li>En <a href="https://docs.python.org/3/tutorial/datastructures.html">Python</a> un <strong>p-uplet nomm√©</strong> est un <strong>dictionnaire</strong>  de type <code class="language-plaintext highlighter-rouge">dict</code> impl√©ment√© par une table de hachage qui permet des op√©rations tr√®s performantes en temps constant.</li>
  <li>L‚Äôacc√®s, l‚Äôajout, la modification d‚Äôun dictionnaire s‚Äôeffectue avec l‚Äôop√©rateur crochet et la syntaxe <code class="language-plaintext highlighter-rouge">dico[clef] = valeur</code>.</li>
  <li>Une variable de type <code class="language-plaintext highlighter-rouge">dict</code> est une <strong>r√©f√©rence</strong> et elle peut  √™tre modifi√©e par effet de bord car 
c‚Äôest une valeur <strong>mutable</strong>.</li>
  <li>Trois m√©thodes permettent le parcours de dictionnaire  :
    <ul>
      <li>par clefs avec <code class="language-plaintext highlighter-rouge">for clef in doc.keys()</code></li>
      <li>par valeurs  avec <code class="language-plaintext highlighter-rouge">for clef in doc.values()</code></li>
      <li>par paires <code class="language-plaintext highlighter-rouge">(clef, valeur)</code> avec <code class="language-plaintext highlighter-rouge">for (clef, valeur) in doc.items()</code> 
:::</li>
    </ul>
  </li>
</ul>

:ET